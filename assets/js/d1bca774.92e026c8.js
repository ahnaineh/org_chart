"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[550],{8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>t});var i=r(6540);const d={},s=i.createContext(d);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},9297:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"genogram/genogram","title":"Genogram Widget","description":"Component for rendering family trees and relationship diagrams","source":"@site/docs/genogram/genogram.mdx","sourceDirName":"genogram","slug":"/genogram/","permalink":"/org_chart/docs/genogram/","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/docs/docs/docs/genogram/genogram.mdx","tags":[],"version":"current","frontMatter":{"title":"Genogram Widget","description":"Component for rendering family trees and relationship diagrams"},"sidebar":"tutorialSidebar","previous":{"title":"GenogramController","permalink":"/org_chart/docs/genogram/controller"},"next":{"title":"Changelog","permalink":"/org_chart/docs/changelog"}}');var d=r(4848),s=r(8453);const l={title:"Genogram Widget",description:"Component for rendering family trees and relationship diagrams"},t="Genogram Widget",o={},a=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Constructor Parameters",id:"constructor-parameters",level:2},{value:"Edge Configuration",id:"edge-configuration",level:2},{value:"GenogramEdgeConfig Properties",id:"genogramedgeconfig-properties",level:3},{value:"Marriage Status",id:"marriage-status",level:2},{value:"Gender-Based Styling",id:"gender-based-styling",level:2},{value:"Drag and Drop Operations",id:"drag-and-drop-operations",level:2},{value:"Family Visualization Patterns",id:"family-visualization-patterns",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"genogram-widget",children:"Genogram Widget"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"Genogram"})," widget displays family trees with complex relationships including marriages, parental connections, and gender distinctions."]}),"\n",(0,d.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-dart",children:"Genogram<Person>(\n  controller: controller,\n  builder: (details) {\n    return Card(\n      // Gender-based styling\n      color: controller.isMale(details.item) \n          ? Colors.lightBlue.shade100 \n          : Colors.pink.shade100,\n      child: Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Column(\n          children: [\n            CircleAvatar(\n              backgroundImage: details.item.photoUrl != null\n                ? NetworkImage(details.item.photoUrl!)\n                : null,\n              child: details.item.photoUrl == null\n                ? Icon(controller.isMale(details.item) \n                    ? Icons.male \n                    : Icons.female)\n                : null,\n            ),\n            SizedBox(height: 8),\n            Text(details.item.name),\n            Text(\"${details.item.birthYear}-${details.item.deathYear ?? ''}\"),\n          ],\n        ),\n      ),\n    );\n  },\n)\n"})}),"\n",(0,d.jsx)(n.h2,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"Genogram"})," widget extends ",(0,d.jsx)(n.code,{children:"BaseGraph"})," and inherits all its ",(0,d.jsx)(n.a,{href:"/org_chart/docs/common/graph",children:"common properties"}),", plus:"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Default"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"controller"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"GenogramController<E>"})}),(0,d.jsx)(n.td,{children:"required"}),(0,d.jsx)(n.td,{children:"Controller managing chart data and layout"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"edgeConfig"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"GenogramEdgeConfig"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"GenogramEdgeConfig()"})}),(0,d.jsx)(n.td,{children:"Configuration for edge styling"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"marriageStatusProvider"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"MarriageStatus Function(E,E)?"})}),(0,d.jsx)(n.td,{children:"null"}),(0,d.jsx)(n.td,{children:"Function to determine marriage status between two individuals"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"onDrop"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Function(E dragged, E target)?"})}),(0,d.jsx)(n.td,{children:"null"}),(0,d.jsx)(n.td,{children:"Callback when a node is dropped onto another"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"edge-configuration",children:"Edge Configuration"}),"\n",(0,d.jsx)(n.p,{children:"Family trees have specialized edge styling for different types of relationships:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-dart",children:"Genogram<Person>(\n  controller: controller,\n  builder: personBuilder,\n  edgeConfig: GenogramEdgeConfig(\n    marriageLineWidth: 2.0,\n    marriageColor: Colors.red,\n    siblingLineColor: Colors.blueGrey,\n    parentChildLineColor: Colors.green,\n    parentChildLineWidth: 1.5,\n    parentChildLineStyle: ParentChildLineStyle.angular,\n    marriageDashPattern: [5, 2], // For divorced/separated relationships\n  ),\n)\n"})}),"\n",(0,d.jsx)(n.h3,{id:"genogramedgeconfig-properties",children:"GenogramEdgeConfig Properties"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Property"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Default"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"marriageLineWidth"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"double"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"1.5"})}),(0,d.jsx)(n.td,{children:"Width of the line connecting spouses"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"marriageColor"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Color?"})}),(0,d.jsx)(n.td,{children:"null"}),(0,d.jsx)(n.td,{children:"Color for marriage lines (null = use linePaint color)"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"siblingLineWidth"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"double"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"1.0"})}),(0,d.jsx)(n.td,{children:"Width of the horizontal line connecting siblings"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"siblingLineColor"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Color?"})}),(0,d.jsx)(n.td,{children:"null"}),(0,d.jsx)(n.td,{children:"Color for sibling connecting lines"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"parentChildLineWidth"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"double"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"1.0"})}),(0,d.jsx)(n.td,{children:"Width of the lines connecting parents to children"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"parentChildLineColor"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"Color?"})}),(0,d.jsx)(n.td,{children:"null"}),(0,d.jsx)(n.td,{children:"Color for parent-child lines"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"marriageDashPattern"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"List<double>?"})}),(0,d.jsx)(n.td,{children:"null"}),(0,d.jsx)(n.td,{children:"Pattern for dashed marriage lines"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"parentChildLineStyle"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"ParentChildLineStyle"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"ParentChildLineStyle.standard"})}),(0,d.jsx)(n.td,{children:"Style of parent-child connections"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"marriage-status",children:"Marriage Status"}),"\n",(0,d.jsx)(n.p,{children:"You can customize how different relationship statuses are displayed:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-dart",children:"Genogram<Person>(\n  controller: controller,\n  builder: personBuilder,\n  marriageStatusProvider: (person, spouse) {\n    if (person.divorceIds?.contains(spouse.id) ?? false) {\n      return MarriageStatus.divorced;\n    }\n    if (person.separationIds?.contains(spouse.id) ?? false) {\n      return MarriageStatus.separated;\n    }\n    return MarriageStatus.married;\n  },\n)\n"})}),"\n",(0,d.jsx)(n.p,{children:"The available marriage statuses are:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Status"}),(0,d.jsx)(n.th,{children:"Visual Representation"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"married"})}),(0,d.jsx)(n.td,{children:"Solid line connecting spouses"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"divorced"})}),(0,d.jsx)(n.td,{children:"Dashed/broken line with two slashes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"separated"})}),(0,d.jsx)(n.td,{children:"Dashed/dotted line"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"engaged"})}),(0,d.jsx)(n.td,{children:"Lighter or thinner line"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"gender-based-styling",children:"Gender-Based Styling"}),"\n",(0,d.jsx)(n.p,{children:"The genogram automatically positions nodes based on gender, but you can also use gender information in your node builder:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-dart",children:"builder: (details) {\n  return Card(\n    shape: controller.isMale(details.item)\n      ? RoundedRectangleBorder(borderRadius: BorderRadius.circular(4))\n      : CircleBorder(), // Traditional: rectangle for males, circle for females\n    color: controller.isMale(details.item)\n      ? Colors.lightBlue.shade100\n      : Colors.pink.shade100,\n    child: /* Node content */,\n  );\n}\n"})}),"\n",(0,d.jsx)(n.h2,{id:"drag-and-drop-operations",children:"Drag and Drop Operations"}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"onDrop"})," callback provides the dragged item and target item:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-dart",children:"Genogram<Person>(\n  controller: controller,\n  builder: personBuilder,\n  onDrop: (dragged, target) {\n    // Handle relationship changes, such as:\n    setState(() {\n      if (controller.isMale(dragged) && controller.isFemale(target)) {\n        // Add marriage relationship\n        dragged.spouseIds ??= [];\n        if (!dragged.spouseIds!.contains(target.id)) {\n          dragged.spouseIds!.add(target.id);\n        }\n      } else {\n        // Add as child\n        if (controller.isMale(target)) {\n          dragged.fatherId = target.id;\n        } else {\n          dragged.motherId = target.id;\n        }\n      }\n      controller.calculatePosition();\n    });\n  },\n)\n"})}),"\n",(0,d.jsx)(n.h2,{id:"family-visualization-patterns",children:"Family Visualization Patterns"}),"\n",(0,d.jsx)(n.p,{children:"The Genogram layout follows standard family tree conventions:"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Couple Relationships"}),": Spouses are positioned side-by-side"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Parent-Child Relations"}),": Children are below/right of their parents"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Sibling Groups"}),": Children of the same parents are grouped together"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Multiple Marriages"}),": All spouses of an individual are adjacent to them"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Gender Ordering"}),": In couples, males are typically positioned before females"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"The layout automatically adapts to complex family structures including:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Multiple marriages"}),"\n",(0,d.jsx)(n.li,{children:"Half-siblings"}),"\n",(0,d.jsx)(n.li,{children:"Adoptive relationships"}),"\n",(0,d.jsx)(n.li,{children:"Multi-generational trees"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);