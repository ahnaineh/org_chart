"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9805],{1470:(e,n,r)=>{r.d(n,{A:()=>I});var t=r(6540),i=r(4164),l=r(3104),a=r(6347),s=r(205),o=r(7485),d=r(1682),c=r(679);function h(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return h(e).map((({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t})))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function u({value:e,tabValues:n}){return n.some((n=>n.value===e))}function x({queryString:e=!1,groupId:n}){const r=(0,a.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function p(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,l=m(e),[a,o]=(0,t.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l}))),[d,h]=x({queryString:r,groupId:i}),[p,j]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,i]=(0,c.Dv)(n);return[r,(0,t.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:i}),g=(()=>{const e=d??p;return u({value:e,tabValues:l})?e:null})();(0,s.A)((()=>{g&&o(g)}),[g]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),j(e)}),[h,j,l]),tabValues:l}}var j=r(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(4848);function v({className:e,block:n,selectedValue:r,selectValue:t,tabValues:a}){const s=[],{blockElementScrollPositionUntilNextRender:o}=(0,l.a_)(),d=e=>{const n=e.currentTarget,i=s.indexOf(n),l=a[i].value;l!==r&&(o(n),t(l))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:t})=>(0,f.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{s.push(e)},onKeyDown:c,onClick:d,...t,className:(0,i.A)("tabs__item",g.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:r}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function y(e){const n=p(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",g.tabList),children:[(0,f.jsx)(v,{...n,...e}),(0,f.jsx)(b,{...n,...e})]})}function I(e){const n=(0,j.A)();return(0,f.jsx)(y,{...e,children:h(e.children)},String(n))}},4741:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"4.0.0-genogram/02-controller","title":"GenogramController","description":"The GenogramController is the heart of your family tree visualization. It manages family relationships, handles genealogical data, and provides methods for navigating and modifying the family structure.","source":"@site/docs/4.0.0-genogram/02-controller.mdx","sourceDirName":"4.0.0-genogram","slug":"/4.0.0-genogram/02-controller","permalink":"/org_chart/docs/4.0.0-genogram/02-controller","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/main/doc/docs/4.0.0-genogram/02-controller.mdx","tags":[],"version":"current","lastUpdatedBy":"Ali Hnaineh","lastUpdatedAt":1756574562000,"sidebarPosition":2,"frontMatter":{"id":"02-controller","title":"GenogramController","sidebar_label":"Controller","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/org_chart/docs/4.0.0-genogram/01-overview"},"next":{"title":"Genogram Widget","permalink":"/org_chart/docs/4.0.0-genogram/03-widget"}}');var i=r(4848),l=r(8453);r(1470),r(9365);const a={id:"02-controller",title:"GenogramController",sidebar_label:"Controller",sidebar_position:2},s="GenogramController",o={},d=[{value:"\ud83d\udccb Constructor",id:"-constructor",level:2},{value:"Constructor Parameters",id:"constructor-parameters",level:3},{value:"\ud83d\udd27 Properties",id:"-properties",level:2},{value:"Read-Only Properties",id:"read-only-properties",level:3},{value:"Configurable Properties",id:"configurable-properties",level:3},{value:"\ud83d\udcda Methods",id:"-methods",level:2},{value:"Data Management",id:"data-management",level:3},{value:"<code>addItem</code>",id:"additem",level:4},{value:"<code>addItems</code>",id:"additems",level:4},{value:"<code>removeItem</code>",id:"removeitem",level:4},{value:"<code>updateItem</code>",id:"updateitem",level:4},{value:"<code>replaceAll</code>",id:"replaceall",level:4},{value:"<code>clearItems</code>",id:"clearitems",level:4},{value:"Relationship Queries",id:"relationship-queries",level:3},{value:"<code>getParents</code>",id:"getparents",level:4},{value:"<code>getSpouseList</code>",id:"getspouselist",level:4},{value:"<code>getChildren</code>",id:"getchildren",level:4},{value:"<code>getSiblings</code>",id:"getsiblings",level:4},{value:"<code>isSubNode</code>",id:"issubnode",level:4},{value:"<code>getLevel</code>",id:"getlevel",level:4},{value:"Layout and Positioning",id:"layout-and-positioning",level:3},{value:"<code>calculatePosition</code>",id:"calculateposition",level:4},{value:"<code>switchOrientation</code>",id:"switchorientation",level:4},{value:"<code>centerNode</code>",id:"centernode",level:4},{value:"Export Functions",id:"export-functions",level:3},{value:"<code>exportAsImage</code>",id:"exportasimage",level:4},{value:"<code>exportAsPdf</code>",id:"exportaspdf",level:4},{value:"\ud83c\udfaf Complete Example",id:"-complete-example",level:2},{value:"\ud83d\udca1 Best Practices",id:"-best-practices",level:2},{value:"1. <strong>Efficient Family Updates</strong>",id:"1-efficient-family-updates",level:3},{value:"2. <strong>Relationship Validation</strong>",id:"2-relationship-validation",level:3},{value:"3. <strong>Performance Optimization</strong>",id:"3-performance-optimization",level:3},{value:"4. <strong>Lazy Loading for Large Family Trees</strong>",id:"4-lazy-loading-for-large-family-trees",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"genogramcontroller",children:"GenogramController"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GenogramController"})," is the heart of your family tree visualization. It manages family relationships, handles genealogical data, and provides methods for navigating and modifying the family structure."]}),"\n",(0,i.jsx)(n.h2,{id:"-constructor",children:"\ud83d\udccb Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"GenogramController<T>({\n  required List<T> items,\n  required String Function(T) idProvider,\n  required String? Function(T) fatherProvider,\n  required String? Function(T) motherProvider,\n  required List<String>? Function(T) spousesProvider,\n  required int Function(T) genderProvider,\n  Size boxSize = const Size(150, 150),\n  double spacing = 30,\n  double runSpacing = 60,\n  GraphOrientation orientation = GraphOrientation.topToBottom,\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"items"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<T>"})}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"The list of family members to display"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"idProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String Function(T)"})}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Function that returns a unique ID for each person"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"fatherProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String? Function(T)"})}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Function that returns the father's ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"motherProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String? Function(T)"})}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Function that returns the mother's ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spousesProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<String>? Function(T)"})}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Function that returns spouse IDs"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"genderProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int Function(T)"})}),(0,i.jsx)(n.td,{children:"\u2705"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Function that returns gender (0=male, 1=female)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boxSize"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Size"})}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Size(150, 150)"})}),(0,i.jsx)(n.td,{children:"Size of each person node"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spacing"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:"30"}),(0,i.jsx)(n.td,{children:"Horizontal spacing between siblings"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"runSpacing"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:"60"}),(0,i.jsx)(n.td,{children:"Vertical spacing between generations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orientation"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GraphOrientation"})}),(0,i.jsx)(n.td,{children:"\u274c"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"topToBottom"})}),(0,i.jsx)(n.td,{children:"Layout orientation"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"-properties",children:"\ud83d\udd27 Properties"}),"\n",(0,i.jsx)(n.h3,{id:"read-only-properties",children:"Read-Only Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"nodes"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<Node<T>>"})}),(0,i.jsx)(n.td,{children:"All nodes in the genogram"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"roots"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<Node<T>>"})}),(0,i.jsx)(n.td,{children:"Root nodes (oldest generation without parents)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"items"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<T>"})}),(0,i.jsx)(n.td,{children:"All family member data items"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"uniqueNodeId"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:"Generates a unique node ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"repaintBoundaryKey"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GlobalKey"})}),(0,i.jsx)(n.td,{children:"Key for export functionality"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"configurable-properties",children:"Configurable Properties"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orientation"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GraphOrientation"})}),(0,i.jsx)(n.td,{children:"Chart orientation (vertical/horizontal)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boxSize"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Size"})}),(0,i.jsx)(n.td,{children:"Size of person nodes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spacing"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsx)(n.td,{children:"Horizontal spacing between siblings"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"runSpacing"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsx)(n.td,{children:"Vertical spacing between generations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"viewerController"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CustomInteractiveViewerController?"})}),(0,i.jsx)(n.td,{children:"Controller for zoom/pan"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"-methods",children:"\ud83d\udcda Methods"}),"\n",(0,i.jsx)(n.h3,{id:"data-management",children:"Data Management"}),"\n",(0,i.jsx)(n.h4,{id:"additem",children:(0,i.jsx)(n.code,{children:"addItem"})}),"\n",(0,i.jsx)(n.p,{children:"Adds a single family member to the genogram."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void addItem(\n  T item, {\n  bool recalculatePosition = true,\n  bool centerGraph = false,\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"controller.addItem(\n  FamilyMember(\n    id: 'child-001',\n    name: 'John Smith Jr.',\n    fatherId: 'father-001',\n    motherId: 'mother-001',\n    gender: 0, // male\n  ),\n  centerGraph: true,\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"additems",children:(0,i.jsx)(n.code,{children:"addItems"})}),"\n",(0,i.jsx)(n.p,{children:"Adds multiple family members to the genogram."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void addItems(\n  List<T> items, {\n  bool recalculatePosition = true,\n  bool centerGraph = false,\n})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"removeitem",children:(0,i.jsx)(n.code,{children:"removeItem"})}),"\n",(0,i.jsx)(n.p,{children:"Removes a family member and handles their descendants."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void removeItem(\n  String? id,\n  ActionOnNodeRemoval action, {\n  bool recalculatePosition = true,\n  bool centerGraph = false,\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ActionOnNodeRemoval Options:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Action"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"unlinkDescendants"})}),(0,i.jsx)(n.td,{children:"Makes descendants root nodes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"connectDescendantsToParent"})}),(0,i.jsx)(n.td,{children:"Connects descendants to removed person's parents"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"removeDescendants"})}),(0,i.jsx)(n.td,{children:"Removes person and all descendants"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Remove person but keep their children\ncontroller.removeItem(\n  'person-005',\n  ActionOnNodeRemoval.unlinkDescendants,\n);\n\n// Remove entire family branch\ncontroller.removeItem(\n  'person-003',\n  ActionOnNodeRemoval.removeDescendants,\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"updateitem",children:(0,i.jsx)(n.code,{children:"updateItem"})}),"\n",(0,i.jsx)(n.p,{children:"Updates an existing family member's information."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void updateItem(\n  T item, {\n  bool recalculatePosition = true,\n  bool centerGraph = false,\n})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"replaceall",children:(0,i.jsx)(n.code,{children:"replaceAll"})}),"\n",(0,i.jsx)(n.p,{children:"Replaces all family members in the genogram."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void replaceAll(\n  List<T> items, {\n  bool recalculatePosition = true,\n  bool centerGraph = false,\n})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"clearitems",children:(0,i.jsx)(n.code,{children:"clearItems"})}),"\n",(0,i.jsx)(n.p,{children:"Removes all family members from the genogram."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void clearItems({\n  bool recalculatePosition = true,\n  bool centerGraph = false,\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"relationship-queries",children:"Relationship Queries"}),"\n",(0,i.jsx)(n.h4,{id:"getparents",children:(0,i.jsx)(n.code,{children:"getParents"})}),"\n",(0,i.jsx)(n.p,{children:"Gets the parents of a specific person."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"List<Node<T>> getParents(Node<T> node)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final childNode = controller.nodes.firstWhere(\n  (n) => controller.idProvider(n.data) == 'child-001'\n);\nfinal parents = controller.getParents(childNode);\n// Returns list containing father and/or mother nodes\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getspouselist",children:(0,i.jsx)(n.code,{children:"getSpouseList"})}),"\n",(0,i.jsx)(n.p,{children:"Gets all spouses of a specific person."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"List<Node<T>> getSpouseList(Node<T> node)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final personNode = controller.nodes.firstWhere(\n  (n) => controller.idProvider(n.data) == 'person-001'\n);\nfinal spouses = controller.getSpouseList(personNode);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getchildren",children:(0,i.jsx)(n.code,{children:"getChildren"})}),"\n",(0,i.jsx)(n.p,{children:"Gets all children of a specific person."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"List<Node<T>> getChildren(Node<T> node)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final parentNode = controller.nodes.firstWhere(\n  (n) => controller.idProvider(n.data) == 'parent-001'\n);\nfinal children = controller.getChildren(parentNode);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getsiblings",children:(0,i.jsx)(n.code,{children:"getSiblings"})}),"\n",(0,i.jsx)(n.p,{children:"Gets all siblings of a specific person."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"List<Node<T>> getSiblings(Node<T> node)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"issubnode",children:(0,i.jsx)(n.code,{children:"isSubNode"})}),"\n",(0,i.jsx)(n.p,{children:"Checks if one person is a descendant of another."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"bool isSubNode(Node<T> child, Node<T> parent)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"getlevel",children:(0,i.jsx)(n.code,{children:"getLevel"})}),"\n",(0,i.jsx)(n.p,{children:"Gets the generation level of a person (1 = oldest generation)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"int getLevel(Node<T> node)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final node = controller.nodes.first;\nfinal generation = controller.getLevel(node); // 1 for grandparents, 2 for parents, etc.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"layout-and-positioning",children:"Layout and Positioning"}),"\n",(0,i.jsx)(n.h4,{id:"calculateposition",children:(0,i.jsx)(n.code,{children:"calculatePosition"})}),"\n",(0,i.jsx)(n.p,{children:"Recalculates node positions using the genogram layout algorithm."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void calculatePosition({bool center = true})\n"})}),"\n",(0,i.jsx)(n.h4,{id:"switchorientation",children:(0,i.jsx)(n.code,{children:"switchOrientation"})}),"\n",(0,i.jsx)(n.p,{children:"Switches between vertical and horizontal layouts."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"void switchOrientation({\n  GraphOrientation? orientation,\n  bool center = true,\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Toggle orientation\ncontroller.switchOrientation();\n\n// Set specific orientation\ncontroller.switchOrientation(\n  orientation: GraphOrientation.leftToRight,\n);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"centernode",children:(0,i.jsx)(n.code,{children:"centerNode"})}),"\n",(0,i.jsx)(n.p,{children:"Centers the view on a specific family member."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<void> centerNode(\n  String nodeId, {\n  double? scale,\n  bool animate = true,\n  Duration duration = const Duration(milliseconds: 300),\n  Curve curve = Curves.easeInOut,\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Focus on a specific family member\nawait controller.centerNode(\n  'person-001',\n  scale: 1.5,\n  animate: true,\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"export-functions",children:"Export Functions"}),"\n",(0,i.jsx)(n.h4,{id:"exportasimage",children:(0,i.jsx)(n.code,{children:"exportAsImage"})}),"\n",(0,i.jsx)(n.p,{children:"Exports the genogram as a PNG image."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<Uint8List?> exportAsImage()\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final imageBytes = await controller.exportAsImage();\nif (imageBytes != null) {\n  // Save to file or share\n  await saveImageToGallery(imageBytes);\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"exportaspdf",children:(0,i.jsx)(n.code,{children:"exportAsPdf"})}),"\n",(0,i.jsx)(n.p,{children:"Exports the genogram as a PDF document."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"Future<pw.Document?> exportAsPdf()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-complete-example",children:"\ud83c\udfaf Complete Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's a comprehensive example showing the controller in action:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class FamilyTreeManager extends StatefulWidget {\n  @override\n  _FamilyTreeManagerState createState() => _FamilyTreeManagerState();\n}\n\nclass _FamilyTreeManagerState extends State<FamilyTreeManager> {\n  late GenogramController<FamilyMember> controller;\n  final viewerController = CustomInteractiveViewerController();\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    // Initialize controller\n    controller = GenogramController<FamilyMember>(\n      items: loadFamilyMembers(),\n      idProvider: (member) => member.id,\n      fatherProvider: (member) => member.fatherId,\n      motherProvider: (member) => member.motherId,\n      spousesProvider: (member) => member.spouseIds,\n      genderProvider: (member) => member.gender, // 0 = male, 1 = female\n      boxSize: Size(180, 120),\n      spacing: 40,\n      runSpacing: 100,\n      orientation: GraphOrientation.topToBottom,\n    );\n    \n    // Set viewer controller for zoom/pan\n    controller.setViewerController(viewerController);\n  }\n  \n  // Add new family member\n  void addFamilyMember(FamilyMember newMember) {\n    setState(() {\n      controller.addItem(newMember, centerGraph: true);\n    });\n  }\n  \n  // Remove family member with options\n  void removeFamilyMember(String memberId) {\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: Text('Remove Family Member'),\n        content: Text('What should happen to their descendants?'),\n        actions: [\n          TextButton(\n            onPressed: () {\n              controller.removeItem(\n                memberId,\n                ActionOnNodeRemoval.unlinkDescendants,\n              );\n              Navigator.pop(context);\n            },\n            child: Text('Keep Descendants'),\n          ),\n          TextButton(\n            onPressed: () {\n              controller.removeItem(\n                memberId,\n                ActionOnNodeRemoval.removeDescendants,\n              );\n              Navigator.pop(context);\n            },\n            child: Text('Remove All Descendants'),\n          ),\n        ],\n      ),\n    );\n  }\n  \n  // Update family relationships\n  void updateRelationships(FamilyMember member) {\n    controller.updateItem(member);\n  }\n  \n  // Search and focus on family member\n  void searchFamilyMember(String query) async {\n    final member = controller.items.firstWhere(\n      (m) => m.name.toLowerCase().contains(query.toLowerCase()),\n    );\n    \n    if (member != null) {\n      await controller.centerNode(\n        member.id,\n        scale: 2.0,\n        animate: true,\n      );\n    }\n  }\n  \n  // Get family statistics\n  Map<String, dynamic> getFamilyStats() {\n    final stats = <String, dynamic>{};\n    \n    // Count generations\n    int maxGeneration = 0;\n    for (final node in controller.nodes) {\n      final level = controller.getLevel(node);\n      if (level > maxGeneration) maxGeneration = level;\n    }\n    stats['generations'] = maxGeneration;\n    \n    // Count family members by gender\n    int males = 0, females = 0;\n    for (final member in controller.items) {\n      if (controller.genderProvider(member) == 0) {\n        males++;\n      } else {\n        females++;\n      }\n    }\n    stats['males'] = males;\n    stats['females'] = females;\n    \n    // Count marriages\n    int marriages = 0;\n    final counted = <String>{};\n    for (final member in controller.items) {\n      final spouses = controller.spousesProvider(member) ?? [];\n      for (final spouseId in spouses) {\n        final pairKey = [member.id, spouseId].sorted().join('-');\n        if (!counted.contains(pairKey)) {\n          counted.add(pairKey);\n          marriages++;\n        }\n      }\n    }\n    stats['marriages'] = marriages;\n    \n    return stats;\n  }\n  \n  // Export family tree\n  void exportFamilyTree() async {\n    final action = await showDialog<String>(\n      context: context,\n      builder: (context) => SimpleDialog(\n        title: Text('Export Family Tree'),\n        children: [\n          SimpleDialogOption(\n            onPressed: () => Navigator.pop(context, 'image'),\n            child: Text('Export as Image'),\n          ),\n          SimpleDialogOption(\n            onPressed: () => Navigator.pop(context, 'pdf'),\n            child: Text('Export as PDF'),\n          ),\n        ],\n      ),\n    );\n    \n    if (action == 'image') {\n      final bytes = await controller.exportAsImage();\n      // Handle image bytes\n    } else if (action == 'pdf') {\n      final pdf = await controller.exportAsPdf();\n      // Handle PDF document\n    }\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    final stats = getFamilyStats();\n    \n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Family Tree'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.rotate_90_degrees_ccw),\n            onPressed: () => controller.switchOrientation(),\n          ),\n          IconButton(\n            icon: Icon(Icons.download),\n            onPressed: exportFamilyTree,\n          ),\n        ],\n      ),\n      body: Column(\n        children: [\n          // Statistics bar\n          Container(\n            padding: EdgeInsets.all(8),\n            color: Theme.of(context).primaryColor.withOpacity(0.1),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: [\n                Text('Generations: ${stats['generations']}'),\n                Text('Members: ${controller.items.length}'),\n                Text('Males: ${stats['males']}'),\n                Text('Females: ${stats['females']}'),\n                Text('Marriages: ${stats['marriages']}'),\n              ],\n            ),\n          ),\n          // Genogram widget\n          Expanded(\n            child: Genogram<FamilyMember>(\n              controller: controller,\n              viewerController: viewerController,\n              // ... rest of configuration\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-best-practices",children:"\ud83d\udca1 Best Practices"}),"\n",(0,i.jsxs)(n.h3,{id:"1-efficient-family-updates",children:["1. ",(0,i.jsx)(n.strong,{children:"Efficient Family Updates"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Bad: Multiple individual updates\nfamilyMembers.forEach((member) => controller.addItem(member));\n\n// Good: Batch update\ncontroller.addItems(familyMembers);\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-relationship-validation",children:["2. ",(0,i.jsx)(n.strong,{children:"Relationship Validation"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Validate relationships before adding\nbool validateFamilyMember(FamilyMember member) {\n  // Check if parents exist\n  if (member.fatherId != null) {\n    final fatherExists = controller.items.any((m) => m.id == member.fatherId);\n    if (!fatherExists) return false;\n  }\n  \n  if (member.motherId != null) {\n    final motherExists = controller.items.any((m) => m.id == member.motherId);\n    if (!motherExists) return false;\n  }\n  \n  return true;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"3-performance-optimization",children:["3. ",(0,i.jsx)(n.strong,{children:"Performance Optimization"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Disable recalculation for batch operations\ncontroller.addItem(member1, recalculatePosition: false);\ncontroller.addItem(member2, recalculatePosition: false);\ncontroller.addItem(member3, recalculatePosition: false);\ncontroller.calculatePosition(); // Calculate once at the end\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"4-lazy-loading-for-large-family-trees",children:["4. ",(0,i.jsx)(n.strong,{children:"Lazy Loading for Large Family Trees"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"class LazyGenogramController<T> extends GenogramController<T> {\n  final Future<List<T>> Function(String parentId) loadDescendants;\n  \n  Future<void> expandBranch(String nodeId) async {\n    final descendants = await loadDescendants(nodeId);\n    addItems(descendants);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Next: Learn about the ",(0,i.jsx)(n.a,{href:"/docs/4.0.0-genogram/03-widget",children:"Genogram Widget \u2192"})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(4164);const i={tabItem:"tabItem_Ymn6"};var l=r(4848);function a({children:e,hidden:n,className:r}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,r),hidden:n,children:e})}}}]);