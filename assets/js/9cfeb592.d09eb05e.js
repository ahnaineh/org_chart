"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[750],{8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},8933:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"genogram/controller","title":"GenogramController","description":"Controller for family tree visualization","source":"@site/docs/genogram/controller.mdx","sourceDirName":"genogram","slug":"/genogram/controller","permalink":"/org_chart/docs/genogram/controller","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/docs/docs/docs/genogram/controller.mdx","tags":[],"version":"current","frontMatter":{"title":"GenogramController","description":"Controller for family tree visualization"},"sidebar":"tutorialSidebar","previous":{"title":"Genogram (Experimental)","permalink":"/org_chart/docs/category/genogram-experimental"},"next":{"title":"Genogram Widget","permalink":"/org_chart/docs/genogram/"}}');var i=r(4848),o=r(8453);const s={title:"GenogramController",description:"Controller for family tree visualization"},l="Genogram Controller",d={},c=[{value:"Creating a Controller",id:"creating-a-controller",level:2},{value:"Constructor Parameters",id:"constructor-parameters",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Family Relationship Methods",id:"family-relationship-methods",level:3},{value:"Layout Algorithm",id:"layout-algorithm",level:2},{value:"Sibling Ordering",id:"sibling-ordering",level:2},{value:"Cache Optimization",id:"cache-optimization",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"genogram-controller",children:"Genogram Controller"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"GenogramController"})," manages data and layout for family trees, handling complex relationships like marriages, parental connections, and gender-based positioning."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-controller",children:"Creating a Controller"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final controller = GenogramController<Person>(\n  items: familyMembers,\n  idProvider: (person) => person.id.toString(),\n  fatherProvider: (person) => person.fatherId?.toString(),\n  motherProvider: (person) => person.motherId?.toString(),\n  spousesProvider: (person) => person.spouseIds?.map((id) => id.toString()).toList(),\n  genderProvider: (person) => person.isMale ? 0 : 1,\n  boxSize: const Size(150, 150),\n  spacing: 30,\n  runSpacing: 60,\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"items"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<E>"})}),(0,i.jsx)(n.td,{children:"Data items to display in the family tree"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"idProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String Function(E)"})}),(0,i.jsx)(n.td,{children:"Function to extract unique ID from an item"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"fatherProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String? Function(E)"})}),(0,i.jsx)(n.td,{children:"Function to extract father's ID from an item"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"motherProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String? Function(E)"})}),(0,i.jsx)(n.td,{children:"Function to extract mother's ID from an item"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spousesProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"List<String>? Function(E)"})}),(0,i.jsx)(n.td,{children:"Function to extract spouse IDs from an item"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"genderProvider"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"int Function(E)"})}),(0,i.jsx)(n.td,{children:"Function to determine gender (0=male, 1=female)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boxSize"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Size"})}),(0,i.jsxs)(n.td,{children:["Size of each node box (default: ",(0,i.jsx)(n.code,{children:"Size(150, 150)"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"spacing"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsxs)(n.td,{children:["Horizontal spacing between nodes (default: ",(0,i.jsx)(n.code,{children:"30"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"runSpacing"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"double"})}),(0,i.jsxs)(n.td,{children:["Vertical spacing between rows (default: ",(0,i.jsx)(n.code,{children:"60"}),")"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"orientation"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GraphOrientation"})}),(0,i.jsxs)(n.td,{children:["Layout direction (default: ",(0,i.jsx)(n.code,{children:"topToBottom"}),")"]})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.h3,{id:"family-relationship-methods",children:"Family Relationship Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Get root nodes (individuals with no parents)\nList<Node<Person>> roots = controller.roots;\n\n// Get children of specific individuals\nList<Node<Person>> children = controller.getChildren([fatherNode, motherNode]);\n\n// Get parents of an individual\nList<Node<Person>> parents = controller.getParents(childNode);\n\n// Get spouses of an individual\nList<Node<Person>> spouses = controller.getSpouseList(personData);\n\n// Gender helper methods\nbool isMale = controller.isMale(personData);\nbool isFemale = controller.isFemale(personData);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"layout-algorithm",children:"Layout Algorithm"}),"\n",(0,i.jsx)(n.p,{children:"The genogram controller implements a sophisticated layout algorithm that:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Places couples (spouses) next to each other:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Husbands and wives are positioned side-by-side"}),"\n",(0,i.jsx)(n.li,{children:"Multiple spouses are arranged in sequence"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Groups children together:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Children of the same parents are positioned together"}),"\n",(0,i.jsx)(n.li,{children:"Half-siblings are ordered by their mother's position"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Positions generations hierarchically:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Oldest generation at the top/left (based on orientation)"}),"\n",(0,i.jsx)(n.li,{children:"Each subsequent generation below/right of their parents"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Centers parents above their children:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The algorithm balances the parent group to be centered above the child group"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The positioning supports both orientations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GraphOrientation.topToBottom"}),": Parents above children"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GraphOrientation.leftToRight"}),": Parents to the left of children"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sibling-ordering",children:"Sibling Ordering"}),"\n",(0,i.jsx)(n.p,{children:"The controller has special logic to keep siblings visually grouped:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// The controller automatically sorts siblings by:\n// 1. Children of the same father and mother stay together\n// 2. Children with the same father are grouped by mother\n// 3. Siblings are ordered based on their mother's position\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cache-optimization",children:"Cache Optimization"}),"\n",(0,i.jsx)(n.p,{children:"For performance with large family trees, an internal cache is maintained:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Access methods use caching for better performance\nList<Node<Person>> spouses = controller.getSpouseList(person); // Uses cache\n\n// Clear caches when data changes significantly\ncontroller.items = updatedFamilyMembers; // Automatically clears caches\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);