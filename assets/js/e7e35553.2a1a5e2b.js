"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[265],{2506:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"org-chart/controller","title":"OrgChartController","description":"Controller for organizational chart hierarchy","source":"@site/docs/org-chart/controller.mdx","sourceDirName":"org-chart","slug":"/org-chart/controller","permalink":"/org_chart/docs/org-chart/controller","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/docs/docs/docs/org-chart/controller.mdx","tags":[],"version":"current","frontMatter":{"title":"OrgChartController","description":"Controller for organizational chart hierarchy"},"sidebar":"tutorialSidebar","previous":{"title":"Org Chart","permalink":"/org_chart/docs/category/org-chart"},"next":{"title":"OrgChart Widget","permalink":"/org_chart/docs/org-chart/org_chart"}}');var o=r(4848),i=r(8453);const l={title:"OrgChartController",description:"Controller for organizational chart hierarchy"},d="OrgChart Controller",s={},a=[{value:"Creating a Controller",id:"creating-a-controller",level:2},{value:"Constructor Parameters",id:"constructor-parameters",level:2},{value:"Key Methods",id:"key-methods",level:2},{value:"Hierarchy Management",id:"hierarchy-management",level:3},{value:"Node Operations",id:"node-operations",level:3},{value:"Layout Configuration",id:"layout-configuration",level:3},{value:"Node Removal Actions",id:"node-removal-actions",level:2},{value:"Layout Algorithm",id:"layout-algorithm",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"orgchart-controller",children:"OrgChart Controller"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"OrgChartController"})," manages data and layout for hierarchical organizational charts with single-parent relationships."]}),"\n",(0,o.jsx)(n.h2,{id:"creating-a-controller",children:"Creating a Controller"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final controller = OrgChartController<Employee>(\n  items: employees,\n  idProvider: (emp) => emp.id.toString(),\n  toProvider: (emp) => emp.managerId?.toString(),\n  boxSize: const Size(180, 100),\n  spacing: 25,\n  runSpacing: 50,\n  leafColumns: 4,\n);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Parameter"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"items"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"List<E>"})}),(0,o.jsx)(n.td,{children:"Data items to display in the chart"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"idProvider"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"String Function(E)"})}),(0,o.jsx)(n.td,{children:"Function to extract unique ID from an item"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"toProvider"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"String? Function(E)"})}),(0,o.jsx)(n.td,{children:"Function to extract parent/manager ID from an item"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsxs)(n.td,{children:[(0,o.jsx)(n.code,{children:"toSetter"})," (optional)"]}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"E Function(E, String?)"})}),(0,o.jsx)(n.td,{children:"Function to update an item's parent/manager ID, returns a new instance (v5.0.0-alpha.3+)"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"boxSize"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Size"})}),(0,o.jsxs)(n.td,{children:["Size of each node box (default: ",(0,o.jsx)(n.code,{children:"Size(200, 100)"}),")"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"spacing"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"double"})}),(0,o.jsxs)(n.td,{children:["Horizontal spacing between nodes (default: ",(0,o.jsx)(n.code,{children:"20"}),")"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"runSpacing"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"double"})}),(0,o.jsxs)(n.td,{children:["Vertical spacing between rows (default: ",(0,o.jsx)(n.code,{children:"50"}),")"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"orientation"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"GraphOrientation"})}),(0,o.jsxs)(n.td,{children:["Layout direction (default: ",(0,o.jsx)(n.code,{children:"topToBottom"}),")"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"leafColumns"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"int"})}),(0,o.jsxs)(n.td,{children:["Number of columns to arrange leaf nodes (default: ",(0,o.jsx)(n.code,{children:"4"}),")"]})]})]})]}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsxs)(n.p,{children:["Starting from version 5.0.0-alpha.3, the ",(0,o.jsx)(n.code,{children:"toSetter"})," function you are required to return a new instance instead of modifying the existing one in place. This allows the use of final instances with copyWith methods."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Before v5.0.0-alpha.3\ntoSetter: (employee, managerId) {\n  employee.managerId = managerId; // Modifies in place\n}\n\n// v5.0.0-alpha.3+\ntoSetter: (employee, managerId) {\n  return employee.copyWith(managerId: managerId); // Returns new instance\n}\n"})})]}),"\n",(0,o.jsx)(n.h2,{id:"key-methods",children:"Key Methods"}),"\n",(0,o.jsx)(n.h3,{id:"hierarchy-management",children:"Hierarchy Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Get root nodes (items with no manager)\nList<Node<Employee>> roots = controller.roots;\n\n// Get direct reports of a node\nList<Node<Employee>> reportees = controller.getSubNodes(someNode);\n\n// Determine if one node is a descendant of another (prevents circular refs)\nbool isSubordinate = controller.isSubNode(employeeNode, managerNode);\n\n// Get the parent/manager of a node\nNode<Employee>? manager = controller.getParent(employeeNode);\n\n// Get the level/depth of a node in the hierarchy\nint level = controller.getLevel(employeeNode); // 1 = root\n"})}),"\n",(0,o.jsx)(n.h3,{id:"node-operations",children:"Node Operations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Add a new employee\ncontroller.addItem(newEmployee);\n\n// Add multiple employees at once (v5.0.0-alpha.3+)\ncontroller.addItems([employee1, employee2, employee3]);\n\n// Clear all employees from the chart (v5.0.0-alpha.3+)\ncontroller.clearItems();\n\n// Remove an employee with different strategies\ncontroller.removeItem(\n  '123',\n  ActionOnNodeRemoval.unlinkDescendants, // Remove links to this node\n);\n\n// Available removal actions (updated in v5.0.0-alpha.3):\n// - unlinkDescendants: Remove employee but leave subordinates without a manager\n// - connectDescendantsToParent: Connect subordinates to the employee's manager\n// - removeDescendants: Remove the employee and all subordinates\n"})}),"\n",(0,o.jsx)(n.h3,{id:"layout-configuration",children:"Layout Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Change the number of columns used for leaf nodes\ncontroller.leafColumns = 3;\ncontroller.calculatePosition();\n\n// Change the orientation\ncontroller.switchOrientation(orientation: GraphOrientation.leftToRight);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"node-removal-actions",children:"Node Removal Actions"}),"\n",(0,o.jsx)(n.p,{children:"When removing a node, you can choose how to handle its subordinates:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Action"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ActionOnNodeRemoval.unlinkDescendants"})}),(0,o.jsxs)(n.td,{children:["Removes node and sets its subordinates' manager to ",(0,o.jsx)(n.code,{children:"null"})]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ActionOnNodeRemoval.connectDescendantsToParent"})}),(0,o.jsx)(n.td,{children:"Connects subordinates to the removed node's own manager"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"ActionOnNodeRemoval.removeDescendants"})}),(0,o.jsx)(n.td,{children:"Removes the node and all its subordinates"})]})]})]}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.p,{children:"The enum values were renamed in version 5.0.0-alpha.3 for better clarity:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"unlink"})," \u2192 ",(0,o.jsx)(n.code,{children:"unlinkDescendants"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"connectToParent"})," \u2192 ",(0,o.jsx)(n.code,{children:"connectDescendantsToParent"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"remove"})," \u2192 ",(0,o.jsx)(n.code,{children:"removeDescendants"})]}),"\n"]})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Example: Promoting subordinates when removing a manager\ncontroller.removeItem(\n  managerId,\n  ActionOnNodeRemoval.connectDescendantsToParent\n);\n\n// Example: Removing an entire department\ncontroller.removeItem(\n  departmentHeadId,\n  ActionOnNodeRemoval.removeDescendants\n);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"layout-algorithm",children:"Layout Algorithm"}),"\n",(0,o.jsx)(n.p,{children:"The controller implements two different layout algorithms depending on the orientation:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Top-to-Bottom"}),": Nodes are positioned in rows, with parents above their children."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Root nodes are positioned at the top"}),"\n",(0,o.jsx)(n.li,{children:"Each level is positioned below the previous level"}),"\n",(0,o.jsx)(n.li,{children:"Parents are centered above their children"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Left-to-Right"}),": Nodes are positioned in columns, with parents to the left of their children."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Root nodes are positioned at the leftmost side"}),"\n",(0,o.jsx)(n.li,{children:"Each level is positioned to the right of the previous level"}),"\n",(0,o.jsx)(n.li,{children:"Parents are centered to the left of their children"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For leaf nodes (nodes without children), the controller arranges them in a grid pattern with ",(0,o.jsx)(n.code,{children:"leafColumns"})," columns."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var t=r(6540);const o={},i=t.createContext(o);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);