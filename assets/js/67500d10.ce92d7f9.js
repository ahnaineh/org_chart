"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[918],{8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>i});var t=a(6540);const r={},o=t.createContext(r);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(o.Provider,{value:n},e.children)}},9304:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"examples","title":"Examples","description":"Code examples and usage patterns for org_chart package","source":"@site/docs/examples.mdx","sourceDirName":".","slug":"/examples","permalink":"/org_chart/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/docs/docs/docs/examples.mdx","tags":[],"version":"current","frontMatter":{"title":"Examples","description":"Code examples and usage patterns for org_chart package"},"sidebar":"tutorialSidebar","previous":{"title":"Changelog","permalink":"/org_chart/docs/changelog"}}');var r=a(4848),o=a(8453);const l={title:"Examples",description:"Code examples and usage patterns for org_chart package"},i="Examples",d={},s=[{value:"Basic Organization Chart",id:"basic-organization-chart",level:2},{value:"Batch Operations (v5.0.0-alpha.3+)",id:"batch-operations-v500-alpha3",level:2},{value:"Node Removal Strategies (v5.0.0-alpha.3+)",id:"node-removal-strategies-v500-alpha3",level:2},{value:"Export Functionality (v5.0.0-alpha.2+)",id:"export-functionality-v500-alpha2",level:2},{value:"Contributing",id:"contributing",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"examples",children:"Examples"})}),"\n",(0,r.jsx)(n.h2,{id:"basic-organization-chart",children:"Basic Organization Chart"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:org_chart/org_chart.dart';\n\nclass Employee {\n  final String id;\n  final String name;\n  final String? managerId;\n  \n  Employee({required this.id, required this.name, this.managerId});\n  \n  // Updated for v5.0.0-alpha.3+: toSetter returns new instance\n  Employee copyWith({String? managerId}) {\n    return Employee(\n      id: id,\n      name: name,\n      managerId: managerId ?? this.managerId,\n    );\n  }\n}\n\nclass MyOrgChart extends StatefulWidget {\n  @override\n  _MyOrgChartState createState() => _MyOrgChartState();\n}\n\nclass _MyOrgChartState extends State<MyOrgChart> {\n  late OrgChartController<Employee> controller;\n  \n  final List<Employee> employees = [\n    Employee(id: '1', name: 'CEO'),\n    Employee(id: '2', name: 'CTO', managerId: '1'),\n    Employee(id: '3', name: 'CFO', managerId: '1'),\n    Employee(id: '4', name: 'Developer', managerId: '2'),\n    Employee(id: '5', name: 'Developer', managerId: '2'),\n    Employee(id: '6', name: 'Accountant', managerId: '3'),\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    controller = OrgChartController<Employee>(\n      items: employees,\n      idProvider: (emp) => emp.id,\n      toProvider: (emp) => emp.managerId,\n      toSetter: (emp, managerId) => emp.copyWith(managerId: managerId),\n      boxSize: const Size(180, 100),\n      spacing: 25,\n      runSpacing: 50,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Organization Chart')),\n      body: OrgChart<Employee>(\n        controller: controller,\n        nodeBuilder: (context, details) {\n          return Container(\n            decoration: BoxDecoration(\n              color: Colors.blue[100],\n              border: Border.all(color: Colors.blue),\n              borderRadius: BorderRadius.circular(8),\n            ),\n            child: Center(\n              child: Text(\n                details.data.name,\n                style: TextStyle(fontWeight: FontWeight.bold),\n              ),\n            ),\n          );\n        },\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _addRandomEmployee,\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n  \n  void _addRandomEmployee() {\n    final newEmployee = Employee(\n      id: DateTime.now().millisecondsSinceEpoch.toString(),\n      name: 'New Employee',\n      managerId: '2', // Assign to CTO\n    );\n    \n    // v5.0.0-alpha.3+: addItem replaces if same ID exists\n    controller.addItem(newEmployee);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"batch-operations-v500-alpha3",children:"Batch Operations (v5.0.0-alpha.3+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class BatchOperationsExample extends StatefulWidget {\n  @override\n  _BatchOperationsExampleState createState() => _BatchOperationsExampleState();\n}\n\nclass _BatchOperationsExampleState extends State<BatchOperationsExample> {\n  late OrgChartController<Employee> controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = OrgChartController<Employee>(\n      items: [],\n      idProvider: (emp) => emp.id,\n      toProvider: (emp) => emp.managerId,\n      toSetter: (emp, managerId) => emp.copyWith(managerId: managerId),\n    );\n  }\n\n  void _loadInitialData() {\n    final initialEmployees = [\n      Employee(id: '1', name: 'CEO'),\n      Employee(id: '2', name: 'CTO', managerId: '1'),\n      Employee(id: '3', name: 'CFO', managerId: '1'),\n    ];\n    \n    // Use addItems for batch addition\n    controller.addItems(initialEmployees);\n  }\n\n  void _addDepartment() {\n    final newDepartment = [\n      Employee(id: '100', name: 'VP Engineering', managerId: '2'),\n      Employee(id: '101', name: 'Senior Dev', managerId: '100'),\n      Employee(id: '102', name: 'Junior Dev', managerId: '100'),\n      Employee(id: '103', name: 'QA Lead', managerId: '100'),\n    ];\n    \n    controller.addItems(newDepartment);\n  }\n\n  void _clearChart() {\n    controller.clearItems();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Batch Operations')),\n      body: Column(\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n            children: [\n              ElevatedButton(\n                onPressed: _loadInitialData,\n                child: Text('Load Initial Data'),\n              ),\n              ElevatedButton(\n                onPressed: _addDepartment,\n                child: Text('Add Department'),\n              ),\n              ElevatedButton(\n                onPressed: _clearChart,\n                child: Text('Clear All'),\n              ),\n            ],\n          ),\n          Expanded(\n            child: OrgChart<Employee>(\n              controller: controller,\n              nodeBuilder: (context, details) {\n                return Container(\n                  decoration: BoxDecoration(\n                    color: Colors.green[100],\n                    border: Border.all(color: Colors.green),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Center(\n                    child: Text(details.data.name),\n                  ),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"node-removal-strategies-v500-alpha3",children:"Node Removal Strategies (v5.0.0-alpha.3+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class RemovalStrategiesExample extends StatefulWidget {\n  @override\n  _RemovalStrategiesExampleState createState() => _RemovalStrategiesExampleState();\n}\n\nclass _RemovalStrategiesExampleState extends State<RemovalStrategiesExample> {\n  late OrgChartController<Employee> controller;\n\n  @override\n  void initState() {\n    super.initState();\n    // Initialize with sample data\n    final employees = [\n      Employee(id: '1', name: 'CEO'),\n      Employee(id: '2', name: 'VP Sales', managerId: '1'),\n      Employee(id: '3', name: 'Sales Manager', managerId: '2'),\n      Employee(id: '4', name: 'Sales Rep 1', managerId: '3'),\n      Employee(id: '5', name: 'Sales Rep 2', managerId: '3'),\n    ];\n\n    controller = OrgChartController<Employee>(\n      items: employees,\n      idProvider: (emp) => emp.id,\n      toProvider: (emp) => emp.managerId,\n      toSetter: (emp, managerId) => emp.copyWith(managerId: managerId),\n    );\n  }\n\n  void _removeWithUnlink() {\n    // Remove Sales Manager, leave reps without manager\n    controller.removeItem('3', ActionOnNodeRemoval.unlinkDescendants);\n  }\n\n  void _removeWithPromotion() {\n    // Remove Sales Manager, promote reps to VP Sales\n    controller.removeItem('3', ActionOnNodeRemoval.connectDescendantsToParent);\n  }\n\n  void _removeWithDescendants() {\n    // Remove VP Sales and entire sales department\n    controller.removeItem('2', ActionOnNodeRemoval.removeDescendants);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Removal Strategies')),\n      body: Column(\n        children: [\n          Padding(\n            padding: EdgeInsets.all(16),\n            child: Column(\n              children: [\n                ElevatedButton(\n                  onPressed: _removeWithUnlink,\n                  child: Text('Remove Manager (Unlink)'),\n                ),\n                ElevatedButton(\n                  onPressed: _removeWithPromotion,\n                  child: Text('Remove Manager (Promote)'),\n                ),\n                ElevatedButton(\n                  onPressed: _removeWithDescendants,\n                  child: Text('Remove Department'),\n                ),\n              ],\n            ),\n          ),\n          Expanded(\n            child: OrgChart<Employee>(\n              controller: controller,\n              nodeBuilder: (context, details) {\n                return Container(\n                  decoration: BoxDecoration(\n                    color: Colors.orange[100],\n                    border: Border.all(color: Colors.orange),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Center(\n                    child: Text(details.data.name),\n                  ),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"export-functionality-v500-alpha2",children:"Export Functionality (v5.0.0-alpha.2+)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class ExportExample extends StatefulWidget {\n  @override\n  _ExportExampleState createState() => _ExportExampleState();\n}\n\nclass _ExportExampleState extends State<ExportExample> {\n  late OrgChartController<Employee> controller;\n\n  @override\n  void initState() {\n    super.initState();\n    // Initialize with sample data\n    controller = OrgChartController<Employee>(\n      items: [\n        Employee(id: '1', name: 'CEO'),\n        Employee(id: '2', name: 'CTO', managerId: '1'),\n        Employee(id: '3', name: 'Developer', managerId: '2'),\n      ],\n      idProvider: (emp) => emp.id,\n      toProvider: (emp) => emp.managerId,\n    );\n  }\n\n  Future<void> _exportAsImage() async {\n    try {\n      final imageData = await controller.exportAsImage();\n      if (imageData != null) {\n        // Save or share the image\n        // You can use packages like path_provider and share_plus\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Chart exported as image!')),\n        );\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Export failed: $e')),\n      );\n    }\n  }\n\n  Future<void> _exportAsPdf() async {\n    try {\n      final pdfDoc = await controller.exportAsPdf();\n      if (pdfDoc != null) {\n        // Save the PDF document\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(content: Text('Chart exported as PDF!')),\n        );\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Export failed: $e')),\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Export Example')),\n      body: Column(\n        children: [\n          Row(\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n            children: [\n              ElevatedButton(\n                onPressed: _exportAsImage,\n                child: Text('Export as Image'),\n              ),\n              ElevatedButton(\n                onPressed: _exportAsPdf,\n                child: Text('Export as PDF'),\n              ),\n            ],\n          ),\n          Expanded(\n            child: OrgChart<Employee>(\n              controller: controller,\n              nodeBuilder: (context, details) {\n                return Container(\n                  decoration: BoxDecoration(\n                    color: Colors.purple[100],\n                    border: Border.all(color: Colors.purple),\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Center(\n                    child: Text(details.data.name),\n                  ),\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,r.jsx)(n.p,{children:"Want to improve these examples?"}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udc47\ud83d\udc47\ud83d\udc47"})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);