"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8178],{1470:(e,n,r)=>{r.d(n,{A:()=>v});var i=r(6540),o=r(4164),l=r(3104),t=r(6347),a=r(205),d=r(7485),s=r(1682),c=r(679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((({props:{value:e,label:n,attributes:r,default:i}})=>({value:e,label:n,attributes:r,default:i})))}(r);return function(e){const n=(0,s.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function g({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const r=(0,t.W6)(),o=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,l=u(e),[t,d]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l}))),[s,h]=m({queryString:r,groupId:o}),[x,p]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,o]=(0,c.Dv)(n);return[r,(0,i.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:o}),b=(()=>{const e=s??x;return g({value:e,tabValues:l})?e:null})();(0,a.A)((()=>{b&&d(b)}),[b]);return{selectedValue:t,selectValue:(0,i.useCallback)((e=>{if(!g({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),p(e)}),[h,p,l]),tabValues:l}}var p=r(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(4848);function f({className:e,block:n,selectedValue:r,selectValue:i,tabValues:t}){const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),s=e=>{const n=e.currentTarget,o=a.indexOf(n),l=t[o].value;l!==r&&(d(n),i(l))},c=e=>{let n=null;switch(e.key){case"Enter":s(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:t.map((({value:e,label:n,attributes:i})=>(0,j.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{a.push(e)},onKeyDown:c,onClick:s,...i,className:(0,o.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":r===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:r}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find((e=>e.props.value===r));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function C(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,o.A)("tabs-container",b.tabList),children:[(0,j.jsx)(f,{...n,...e}),(0,j.jsx)(y,{...n,...e})]})}function v(e){const n=(0,p.A)();return(0,j.jsx)(C,{...e,children:h(e.children)},String(n))}},6524:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>d,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"4.0.0-genogram/03-widget","title":"Genogram Widget","description":"The Genogram widget is the visual component that renders your family tree. It provides extensive customization options for relationship visualization, node appearance, and family interactions.","source":"@site/docs/4.0.0-genogram/03-widget.mdx","sourceDirName":"4.0.0-genogram","slug":"/4.0.0-genogram/03-widget","permalink":"/org_chart/docs/4.0.0-genogram/03-widget","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/main/doc/docs/4.0.0-genogram/03-widget.mdx","tags":[],"version":"current","lastUpdatedBy":"Ali Hnaineh","lastUpdatedAt":1756574903000,"sidebarPosition":3,"frontMatter":{"id":"03-widget","title":"Genogram Widget","sidebar_label":"Genogram Widget","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Controller","permalink":"/org_chart/docs/4.0.0-genogram/02-controller"},"next":{"title":"Live Playground","permalink":"/org_chart/docs/6.0.0-examples/01-live-playground"}}');var o=r(4848),l=r(8453),t=r(1470),a=r(9365);const d={id:"03-widget",title:"Genogram Widget",sidebar_label:"Genogram Widget",sidebar_position:3},s="Genogram Widget",c={},h=[{value:"Widget Constructor",id:"widget-constructor",level:2},{value:"Widget Parameters",id:"widget-parameters",level:2},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Optional Parameters",id:"optional-parameters",level:3},{value:"Node Builder",id:"node-builder",level:2},{value:"Basic Node Builder",id:"basic-node-builder",level:3},{value:"Advanced Node Builder with Genogram Symbols",id:"advanced-node-builder-with-genogram-symbols",level:3},{value:"Relationship Styling",id:"relationship-styling",level:2},{value:"GenogramEdgeConfig",id:"genogramedgeconfig",level:3},{value:"Marriage Status Provider",id:"marriage-status-provider",level:3},{value:"Custom Marriage Styles",id:"custom-marriage-styles",level:2},{value:"Drag and Drop",id:"drag-and-drop",level:2},{value:"Context Menus",id:"context-menus",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Medical Genogram Features",id:"medical-genogram-features",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"genogram-widget",children:"Genogram Widget"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Genogram"})," widget is the visual component that renders your family tree. It provides extensive customization options for relationship visualization, node appearance, and family interactions."]}),"\n",(0,o.jsx)(n.h2,{id:"widget-constructor",children:"Widget Constructor"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"Genogram<T>({\n  Key? key,\n  required GenogramController<T> controller,\n  required Widget Function(NodeBuilderDetails<T>) builder,\n  bool isDraggable = false,\n  Curve curve = Curves.linear,\n  Duration duration = const Duration(milliseconds: 300),\n  Paint? linePaint,\n  double cornerRadius = 0,\n  GraphArrowStyle arrowStyle = const SolidGraphArrow(),\n  LineEndingType lineEndingType = LineEndingType.arrow,\n  GenogramEdgeConfig edgeConfig = const GenogramEdgeConfig(),\n  MarriageStatus Function(T, T)? marriageStatusProvider,\n  void Function(T dragged, T target)? onDrop,\n  Widget Function(BuildContext, T)? optionsBuilder,\n  void Function(T)? onOptionSelect,\n  CustomInteractiveViewerController? viewerController,\n  InteractionConfig? interactionConfig,\n  KeyboardConfig? keyboardConfig,\n  ZoomConfig? zoomConfig,\n  FocusNode? focusNode,\n})\n"})}),"\n",(0,o.jsx)(n.h2,{id:"widget-parameters",children:"Widget Parameters"}),"\n",(0,o.jsx)(n.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Parameter"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"controller"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"GenogramController<T>"})}),(0,o.jsx)(n.td,{children:"Controls family data and layout"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"builder"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Widget Function(NodeBuilderDetails<T>)"})}),(0,o.jsx)(n.td,{children:"Builds each person node widget"})]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"optional-parameters",children:"Optional Parameters"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Parameter"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"isDraggable"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"bool"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"false"})}),(0,o.jsx)(n.td,{children:"Enable drag and drop"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"curve"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Curve"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Curves.linear"})}),(0,o.jsx)(n.td,{children:"Animation curve"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"duration"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Duration"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"300ms"})}),(0,o.jsx)(n.td,{children:"Animation duration"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"linePaint"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Paint?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Parent-child line styling"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"cornerRadius"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"double"})}),(0,o.jsx)(n.td,{children:"0"}),(0,o.jsx)(n.td,{children:"Corner radius for edges"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"arrowStyle"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"GraphArrowStyle"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"SolidGraphArrow()"})}),(0,o.jsx)(n.td,{children:"Arrow/line style"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"lineEndingType"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"LineEndingType"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:".arrow"})}),(0,o.jsx)(n.td,{children:"Line ending decoration"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"edgeConfig"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"GenogramEdgeConfig"})}),(0,o.jsx)(n.td,{children:"default"}),(0,o.jsx)(n.td,{children:"Marriage/relationship styling"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"marriageStatusProvider"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Function?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Returns marriage status between two people"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onDrop"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Function?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Drag and drop handler"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"optionsBuilder"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Function?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Context menu builder"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"onOptionSelect"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Function?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Context menu handler"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"viewerController"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Controller?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Zoom/pan controller"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"interactionConfig"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Config?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Interaction settings"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"keyboardConfig"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Config?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Keyboard shortcuts"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"zoomConfig"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"Config?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Zoom settings"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"focusNode"})}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"FocusNode?"})}),(0,o.jsx)(n.td,{children:"null"}),(0,o.jsx)(n.td,{children:"Keyboard focus node"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"node-builder",children:"Node Builder"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"builder"})," function receives a ",(0,o.jsx)(n.code,{children:"NodeBuilderDetails<T>"})," object with context about each family member:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class NodeBuilderDetails<T> {\n  final T item;                    // Your family member data\n  final int level;                 // Generation level (1 = oldest)\n  final Function hideNodes;        // Toggle descendants visibility\n  final bool nodesHidden;         // Are descendants hidden?\n  final bool isBeingDragged;      // Is node being dragged?\n  final bool isOverlapped;        // Is another node over this?\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"basic-node-builder",children:"Basic Node Builder"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"Genogram<FamilyMember>(\n  controller: controller,\n  builder: (NodeBuilderDetails<FamilyMember> details) {\n    final member = details.item;\n    final isMale = controller.genderProvider(member) == 0;\n    \n    return Container(\n      decoration: BoxDecoration(\n        color: isMale ? Colors.blue.shade100 : Colors.pink.shade100,\n        border: Border.all(\n          color: isMale ? Colors.blue : Colors.pink,\n          width: 2,\n        ),\n        borderRadius: BorderRadius.circular(8),\n      ),\n      child: Center(\n        child: Text(member.name),\n      ),\n    );\n  },\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"advanced-node-builder-with-genogram-symbols",children:"Advanced Node Builder with Genogram Symbols"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"builder: (NodeBuilderDetails<FamilyMember> details) {\n  final member = details.item;\n  final isMale = controller.genderProvider(member) == 0;\n  \n  return AnimatedContainer(\n    duration: Duration(milliseconds: 200),\n    decoration: BoxDecoration(\n      color: details.isBeingDragged \n        ? Colors.grey.shade200\n        : (isMale ? Colors.blue.shade50 : Colors.pink.shade50),\n      border: Border.all(\n        color: details.isOverlapped \n          ? Colors.green.shade500\n          : (isMale ? Colors.blue : Colors.pink),\n        width: details.isOverlapped ? 3 : 2,\n      ),\n      shape: isMale ? BoxShape.rectangle : BoxShape.circle,\n      borderRadius: isMale ? BorderRadius.circular(8) : null,\n      boxShadow: [\n        BoxShadow(\n          color: Colors.black.withOpacity(\n            details.isBeingDragged ? 0.3 : 0.1\n          ),\n          blurRadius: details.isBeingDragged ? 10 : 4,\n          offset: Offset(0, details.isBeingDragged ? 6 : 2),\n        ),\n      ],\n    ),\n    child: Stack(\n      children: [\n        // Main content\n        Padding(\n          padding: EdgeInsets.all(12),\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              // Gender symbol\n              Icon(\n                isMale ? Icons.male : Icons.female,\n                color: isMale ? Colors.blue : Colors.pink,\n                size: 24,\n              ),\n              SizedBox(height: 4),\n              // Name\n              Text(\n                member.name,\n                style: TextStyle(\n                  fontWeight: FontWeight.bold,\n                  fontSize: 14,\n                ),\n                textAlign: TextAlign.center,\n              ),\n              // Birth/Death dates\n              if (member.birthDate != null)\n                Text(\n                  '${member.birthDate}${member.deathDate != null ? ' - ${member.deathDate}' : ''}',\n                  style: TextStyle(\n                    fontSize: 10,\n                    color: Colors.grey.shade600,\n                  ),\n                ),\n              // Medical conditions (if any)\n              if (member.medicalConditions.isNotEmpty)\n                Container(\n                  margin: EdgeInsets.only(top: 4),\n                  padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),\n                  decoration: BoxDecoration(\n                    color: Colors.red.shade100,\n                    borderRadius: BorderRadius.circular(10),\n                  ),\n                  child: Text(\n                    member.medicalConditions.length.toString(),\n                    style: TextStyle(\n                      fontSize: 10,\n                      color: Colors.red.shade700,\n                    ),\n                  ),\n                ),\n            ],\n          ),\n        ),\n        \n        // Deceased indicator\n        if (member.isDeceased)\n          Positioned.fill(\n            child: CustomPaint(\n              painter: CrossPainter(),\n            ),\n          ),\n        \n        // Generation badge\n        Positioned(\n          top: 0,\n          right: 0,\n          child: Container(\n            padding: EdgeInsets.all(4),\n            decoration: BoxDecoration(\n              color: Colors.orange,\n              borderRadius: BorderRadius.circular(10),\n            ),\n            child: Text(\n              'G${details.level}',\n              style: TextStyle(\n                color: Colors.white,\n                fontSize: 10,\n                fontWeight: FontWeight.bold,\n              ),\n            ),\n          ),\n        ),\n        \n        // Collapse/Expand button for parents\n        if (hasChildren(member))\n          Positioned(\n            bottom: -8,\n            left: 0,\n            right: 0,\n            child: Center(\n              child: GestureDetector(\n                onTap: () => details.hideNodes(),\n                child: Container(\n                  width: 24,\n                  height: 24,\n                  decoration: BoxDecoration(\n                    color: Colors.white,\n                    shape: BoxShape.circle,\n                    border: Border.all(color: Colors.grey),\n                  ),\n                  child: Icon(\n                    details.nodesHidden\n                      ? Icons.expand_more\n                      : Icons.expand_less,\n                    size: 16,\n                  ),\n                ),\n              ),\n            ),\n          ),\n      ],\n    ),\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"relationship-styling",children:"Relationship Styling"}),"\n",(0,o.jsx)(n.h3,{id:"genogramedgeconfig",children:"GenogramEdgeConfig"}),"\n",(0,o.jsx)(n.p,{children:"Configure the appearance of family relationships:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"Genogram(\n  edgeConfig: GenogramEdgeConfig(\n    // Standard marriage line\n    defaultMarriageStyle: MarriageStyle(\n      lineStyle: MarriageLineStyle(\n        color: Colors.black,\n        strokeWidth: 2.0,\n      ),\n    ),\n    \n    // Divorced marriage line\n    divorcedMarriageStyle: MarriageStyle(\n      lineStyle: MarriageLineStyle(\n        color: Colors.red,\n        strokeWidth: 2.0,\n      ),\n      decorator: DivorceDecorator(), // Adds double slash\n    ),\n    \n    // Parent-child connections\n    childStrokeWidth: 1.5,\n    \n    // Single parent connections\n    childSingleParentStrokeWidth: 1.0,\n    childSingleParentColor: Colors.grey,\n    \n    // Different colors for multiple marriages\n    marriageColors: [\n      Colors.blue,\n      Colors.green,\n      Colors.orange,\n      Colors.purple,\n    ],\n  ),\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"marriage-status-provider",children:"Marriage Status Provider"}),"\n",(0,o.jsx)(n.p,{children:"Determine the relationship status between spouses:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"Genogram(\n  marriageStatusProvider: (FamilyMember person, FamilyMember spouse) {\n    // Check your data model for relationship status\n    if (person.divorces?.contains(spouse.id) ?? false) {\n      return MarriageStatus.divorced;\n    }\n    return MarriageStatus.married;\n  },\n)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"custom-marriage-styles",children:"Custom Marriage Styles"}),"\n",(0,o.jsxs)(t.A,{children:[(0,o.jsx)(a.A,{value:"standard",label:"Standard Marriage",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class StandardMarriageStyle extends MarriageStyle {\n  StandardMarriageStyle() : super(\n    lineStyle: MarriageLineStyle(\n      color: Colors.black,\n      strokeWidth: 2.0,\n    ),\n  );\n}\n"})})}),(0,o.jsx)(a.A,{value:"divorced",label:"Divorced",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class DivorcedMarriageStyle extends MarriageStyle {\n  DivorcedMarriageStyle() : super(\n    lineStyle: MarriageLineStyle(\n      color: Colors.red,\n      strokeWidth: 2.0,\n      dashPattern: [5, 5], // Dashed line\n    ),\n    decorator: DivorceDecorator(\n      slashColor: Colors.red,\n      slashWidth: 3.0,\n    ),\n  );\n}\n"})})}),(0,o.jsx)(a.A,{value:"separated",label:"Separated",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class SeparatedMarriageStyle extends MarriageStyle {\n  SeparatedMarriageStyle() : super(\n    lineStyle: MarriageLineStyle(\n      color: Colors.orange,\n      strokeWidth: 1.5,\n      dashPattern: [10, 5],\n    ),\n  );\n}\n"})})})]}),"\n",(0,o.jsx)(n.h2,{id:"drag-and-drop",children:"Drag and Drop"}),"\n",(0,o.jsx)(n.p,{children:"Enable rearranging family relationships:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"Genogram<FamilyMember>(\n  controller: controller,\n  isDraggable: true,\n  onDrop: (FamilyMember dragged, FamilyMember target) {\n    // Validate the relationship change\n    if (!canChangeRelationship(dragged, target)) {\n      showSnackBar('Invalid relationship change');\n      return;\n    }\n    \n    // Update relationships\n    setState(() {\n      // Example: Changing spouse\n      if (isSpouseChange(dragged, target)) {\n        updateSpouseRelationship(dragged, target);\n      }\n      // Example: Adoption or custody change\n      else if (isParentChange(dragged, target)) {\n        updateParentRelationship(dragged, target);\n      }\n      \n      controller.updateItem(dragged);\n    });\n  },\n)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"context-menus",children:"Context Menus"}),"\n",(0,o.jsx)(n.p,{children:"Add right-click menus for family members:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"Genogram<FamilyMember>(\n  optionsBuilder: (BuildContext context, FamilyMember member) {\n    return Card(\n      elevation: 8,\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          ListTile(\n            leading: Icon(Icons.edit),\n            title: Text('Edit Details'),\n            onTap: () => editMember(member),\n          ),\n          ListTile(\n            leading: Icon(Icons.add),\n            title: Text('Add Child'),\n            onTap: () => addChild(member),\n          ),\n          ListTile(\n            leading: Icon(Icons.favorite),\n            title: Text('Add Spouse'),\n            onTap: () => addSpouse(member),\n          ),\n          if (member.spouses?.isNotEmpty ?? false)\n            ListTile(\n              leading: Icon(Icons.heart_broken),\n              title: Text('Record Divorce'),\n              onTap: () => recordDivorce(member),\n            ),\n          Divider(),\n          ListTile(\n            leading: Icon(Icons.medical_services),\n            title: Text('Medical History'),\n            onTap: () => showMedicalHistory(member),\n          ),\n          ListTile(\n            leading: Icon(Icons.info),\n            title: Text('Full Details'),\n            onTap: () => showMemberDetails(member),\n          ),\n        ],\n      ),\n    );\n  },\n)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's a full-featured Genogram implementation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class FamilyTreeViewer extends StatefulWidget {\n  @override\n  _FamilyTreeViewerState createState() => _FamilyTreeViewerState();\n}\n\nclass _FamilyTreeViewerState extends State<FamilyTreeViewer> {\n  late GenogramController<FamilyMember> controller;\n  final viewerController = CustomInteractiveViewerController();\n  final focusNode = FocusNode();\n  \n  @override\n  void initState() {\n    super.initState();\n    controller = GenogramController<FamilyMember>(\n      items: loadFamilyData(),\n      idProvider: (m) => m.id,\n      fatherProvider: (m) => m.fatherId,\n      motherProvider: (m) => m.motherId,\n      spousesProvider: (m) => m.spouseIds,\n      genderProvider: (m) => m.gender,\n      boxSize: Size(160, 120),\n      spacing: 40,\n      runSpacing: 100,\n    );\n    controller.setViewerController(viewerController);\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Family Genogram'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.search),\n            onPressed: () => showSearchDialog(),\n          ),\n          IconButton(\n            icon: Icon(Icons.filter_list),\n            onPressed: () => showFilterOptions(),\n          ),\n        ],\n      ),\n      body: Genogram<FamilyMember>(\n        controller: controller,\n        viewerController: viewerController,\n        focusNode: focusNode,\n        \n        // Visual configuration\n        duration: Duration(milliseconds: 400),\n        curve: Curves.easeInOutCubic,\n        cornerRadius: 8,\n        \n        // Relationship styling\n        edgeConfig: GenogramEdgeConfig(\n          defaultMarriageStyle: MarriageStyle(\n            lineStyle: MarriageLineStyle(\n              color: Colors.black87,\n              strokeWidth: 2.0,\n            ),\n          ),\n          divorcedMarriageStyle: MarriageStyle(\n            lineStyle: MarriageLineStyle(\n              color: Colors.red.shade400,\n              strokeWidth: 2.0,\n            ),\n            decorator: DivorceDecorator(),\n          ),\n          childStrokeWidth: 1.5,\n          marriageColors: [\n            Colors.blue.shade700,\n            Colors.green.shade700,\n            Colors.purple.shade700,\n          ],\n        ),\n        \n        // Marriage status determination\n        marriageStatusProvider: (person, spouse) {\n          if (person.divorces?.contains(spouse.id) ?? false) {\n            return MarriageStatus.divorced;\n          }\n          return MarriageStatus.married;\n        },\n        \n        // Interactions\n        isDraggable: true,\n        onDrop: handleFamilyMemberDrop,\n        optionsBuilder: buildContextMenu,\n        \n        // Zoom and pan\n        interactionConfig: InteractionConfig(\n          enableZoom: true,\n          enablePan: true,\n          enableDoubleTapZoom: true,\n        ),\n        zoomConfig: ZoomConfig(\n          minScale: 0.25,\n          maxScale: 4.0,\n          initialScale: 1.0,\n        ),\n        keyboardConfig: KeyboardConfig(\n          enableKeyboardControls: true,\n        ),\n        \n        // Node builder\n        builder: (details) => buildFamilyMemberNode(details),\n      ),\n    );\n  }\n  \n  Widget buildFamilyMemberNode(NodeBuilderDetails<FamilyMember> details) {\n    final member = details.item;\n    final isMale = controller.genderProvider(member) == 0;\n    \n    return GestureDetector(\n      onDoubleTap: () => showMemberDetails(member),\n      child: Container(\n        decoration: BoxDecoration(\n          gradient: LinearGradient(\n            colors: isMale\n              ? [Colors.blue.shade100, Colors.blue.shade50]\n              : [Colors.pink.shade100, Colors.pink.shade50],\n            begin: Alignment.topCenter,\n            end: Alignment.bottomCenter,\n          ),\n          border: Border.all(\n            color: details.isOverlapped\n              ? Colors.green.shade500\n              : (isMale ? Colors.blue.shade300 : Colors.pink.shade300),\n            width: details.isOverlapped ? 3 : 2,\n          ),\n          borderRadius: BorderRadius.circular(12),\n          boxShadow: [\n            BoxShadow(\n              color: Colors.black.withOpacity(0.1),\n              blurRadius: 4,\n              offset: Offset(0, 2),\n            ),\n          ],\n        ),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: [\n            // Photo or avatar\n            CircleAvatar(\n              radius: 25,\n              backgroundColor: isMale ? Colors.blue : Colors.pink,\n              child: member.photoUrl != null\n                ? ClipOval(\n                    child: Image.network(\n                      member.photoUrl!,\n                      fit: BoxFit.cover,\n                    ),\n                  )\n                : Icon(\n                    isMale ? Icons.male : Icons.female,\n                    color: Colors.white,\n                    size: 30,\n                  ),\n            ),\n            SizedBox(height: 8),\n            // Name\n            Text(\n              member.name,\n              style: TextStyle(\n                fontWeight: FontWeight.bold,\n                fontSize: 12,\n              ),\n              textAlign: TextAlign.center,\n              maxLines: 2,\n              overflow: TextOverflow.ellipsis,\n            ),\n            // Dates\n            Text(\n              '${member.birthYear}${member.deathYear != null ? ' - ${member.deathYear}' : ''}',\n              style: TextStyle(\n                fontSize: 10,\n                color: Colors.grey.shade600,\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"medical-genogram-features",children:"Medical Genogram Features"}),"\n",(0,o.jsx)(n.p,{children:"Add medical history visualization:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Custom node builder for medical genogram\nWidget buildMedicalNode(NodeBuilderDetails<FamilyMember> details) {\n  final member = details.item;\n  final conditions = member.medicalConditions;\n  \n  return Container(\n    decoration: BoxDecoration(\n      color: conditions.isEmpty \n        ? Colors.green.shade50\n        : Colors.red.shade50,\n      border: Border.all(\n        color: conditions.isEmpty\n          ? Colors.green\n          : Colors.red,\n      ),\n    ),\n    child: Column(\n      children: [\n        Text(member.name),\n        if (conditions.isNotEmpty)\n          ...conditions.map((condition) => \n            Chip(\n              label: Text(\n                condition,\n                style: TextStyle(fontSize: 10),\n              ),\n              backgroundColor: getConditionColor(condition),\n            ),\n          ),\n      ],\n    ),\n  );\n}\n\nColor getConditionColor(String condition) {\n  // Map conditions to colors\n  final colorMap = {\n    'diabetes': Colors.orange,\n    'heart disease': Colors.red,\n    'cancer': Colors.purple,\n    'hypertension': Colors.blue,\n  };\n  return colorMap[condition.toLowerCase()] ?? Colors.grey;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use RepaintBoundary"}),": Already built into the widget for each node"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optimize Images"}),": Cache family photos"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplify Nodes"}),": Use simpler designs for large family trees"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lazy Loading"}),": Load distant relatives on-demand"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Limit Animations"}),": Reduce animation duration for better performance"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/6.0.0-examples/01-live-playground",children:"Examples \u2192"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>t});r(6540);var i=r(4164);const o={tabItem:"tabItem_Ymn6"};var l=r(4848);function t({children:e,hidden:n,className:r}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,r),hidden:n,children:e})}}}]);