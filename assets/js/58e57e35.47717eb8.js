"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9526],{1470:(e,n,t)=>{t.d(n,{A:()=>C});var r=t(6540),a=t(4164),i=t(3104),o=t(6347),l=t(205),s=t(7485),d=t(1682),c=t(679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function g({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[o,s]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[d,u]=g({queryString:t,groupId:a}),[p,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,c.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:a}),y=(()=>{const e=d??p;return h({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{y&&s(y)}),[y]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=t(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function b({className:e,block:n,selectedValue:t,selectValue:r,tabValues:o}){const l=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),d=e=>{const n=e.currentTarget,a=l.indexOf(n),i=o[a].value;i!==t&&(s(n),r(i))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:o.map((({value:e,label:n,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:c,onClick:d,...r,className:(0,a.A)("tabs__item",y.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function S({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function v(e){const n=p(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,x.jsx)(b,{...n,...e}),(0,x.jsx)(S,{...n,...e})]})}function C(e){const n=(0,f.A)();return(0,x.jsx)(v,{...e,children:u(e.children)},String(n))}},6441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"2.0.0-getting-started/02-basic-usage","title":"Basic Usage","description":"Learn how to create your first organizational chart or family tree in just 5 minutes!","source":"@site/docs/2.0.0-getting-started/02-basic-usage.mdx","sourceDirName":"2.0.0-getting-started","slug":"/2.0.0-getting-started/02-basic-usage","permalink":"/org_chart/docs/2.0.0-getting-started/02-basic-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/main/doc/docs/2.0.0-getting-started/02-basic-usage.mdx","tags":[],"version":"current","lastUpdatedBy":"Ali Hnaineh","lastUpdatedAt":1756574562000,"sidebarPosition":2,"frontMatter":{"id":"02-basic-usage","title":"Basic Usage","sidebar_label":"Basic Usage","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/org_chart/docs/2.0.0-getting-started/01-installation"},"next":{"title":"Migration Guide","permalink":"/org_chart/docs/2.0.0-getting-started/04-migration-guide"}}');var a=t(4848),i=t(8453),o=t(1470),l=t(9365);const s={id:"02-basic-usage",title:"Basic Usage",sidebar_label:"Basic Usage",sidebar_position:2},d="Basic Usage",c={},u=[{value:"\ud83d\ude80 Quick Start",id:"-quick-start",level:2},{value:"Step 1: Import the Package",id:"step-1-import-the-package",level:3},{value:"Step 2: Define Your Data Model",id:"step-2-define-your-data-model",level:3},{value:"Step 3: Create the Controller",id:"step-3-create-the-controller",level:3},{value:"Step 4: Build the Chart Widget",id:"step-4-build-the-chart-widget",level:3},{value:"\ud83c\udfa8 Complete Working Example",id:"-complete-working-example",level:2},{value:"\ud83c\udfaf What&#39;s Next?",id:"-whats-next",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"basic-usage",children:"Basic Usage"})}),"\n",(0,a.jsx)(n.p,{children:"Learn how to create your first organizational chart or family tree in just 5 minutes!"}),"\n",(0,a.jsx)(n.h2,{id:"-quick-start",children:"\ud83d\ude80 Quick Start"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-import-the-package",children:"Step 1: Import the Package"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"import 'package:org_chart/org_chart.dart';\nimport 'package:flutter/material.dart';\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-define-your-data-model",children:"Step 2: Define Your Data Model"}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(l.A,{value:"orgchart",label:"For OrgChart",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Define your data model\nclass Employee {\n  final String id;\n  final String name;\n  final String? managerId;\n  final String position;\n  final String department;\n  final String imageUrl;\n\n  Employee({\n    required this.id,\n    required this.name,\n    this.managerId,\n    required this.position,\n    required this.department,\n    required this.imageUrl,\n  });\n}\n\n// Create sample data\nfinal employees = [\n  Employee(\n    id: '1',\n    name: 'Jane Smith',\n    managerId: null,\n    position: 'CEO',\n    department: 'Executive',\n    imageUrl: 'https://i.pravatar.cc/150?img=1',\n  ),\n  Employee(\n    id: '2',\n    name: 'John Doe',\n    managerId: '1',\n    position: 'CTO',\n    department: 'Technology',\n    imageUrl: 'https://i.pravatar.cc/150?img=2',\n  ),\n  Employee(\n    id: '3',\n    name: 'Sarah Johnson',\n    managerId: '1',\n    position: 'CFO',\n    department: 'Finance',\n    imageUrl: 'https://i.pravatar.cc/150?img=3',\n  ),\n  Employee(\n    id: '4',\n    name: 'Mike Wilson',\n    managerId: '2',\n    position: 'Lead Developer',\n    department: 'Technology',\n    imageUrl: 'https://i.pravatar.cc/150?img=4',\n  ),\n  Employee(\n    id: '5',\n    name: 'Emily Brown',\n    managerId: '2',\n    position: 'QA Manager',\n    department: 'Technology',\n    imageUrl: 'https://i.pravatar.cc/150?img=5',\n  ),\n];\n"})})}),(0,a.jsx)(l.A,{value:"genogram",label:"For Genogram",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Define your data model\nclass Person {\n  final String id;\n  final String name;\n  final String? fatherId;\n  final String? motherId;\n  final List<String> spouseIds;\n  final int gender; // 0 = male, 1 = female\n  final DateTime birthDate;\n  final bool isAlive;\n\n  Person({\n    required this.id,\n    required this.name,\n    this.fatherId,\n    this.motherId,\n    this.spouseIds = const [],\n    required this.gender,\n    required this.birthDate,\n    this.isAlive = true,\n  });\n}\n\n// Create sample family data\nfinal familyMembers = [\n  // Grandparents\n  Person(\n    id: '1',\n    name: 'Robert Smith',\n    gender: 0,\n    birthDate: DateTime(1940, 5, 15),\n    spouseIds: ['2'],\n  ),\n  Person(\n    id: '2',\n    name: 'Mary Smith',\n    gender: 1,\n    birthDate: DateTime(1942, 8, 20),\n    spouseIds: ['1'],\n  ),\n  // Parents\n  Person(\n    id: '3',\n    name: 'James Smith',\n    fatherId: '1',\n    motherId: '2',\n    gender: 0,\n    birthDate: DateTime(1965, 3, 10),\n    spouseIds: ['4'],\n  ),\n  Person(\n    id: '4',\n    name: 'Linda Johnson',\n    gender: 1,\n    birthDate: DateTime(1967, 11, 25),\n    spouseIds: ['3'],\n  ),\n  // Children\n  Person(\n    id: '5',\n    name: 'Tom Smith',\n    fatherId: '3',\n    motherId: '4',\n    gender: 0,\n    birthDate: DateTime(1990, 7, 8),\n  ),\n  Person(\n    id: '6',\n    name: 'Emma Smith',\n    fatherId: '3',\n    motherId: '4',\n    gender: 1,\n    birthDate: DateTime(1993, 4, 15),\n  ),\n];\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"step-3-create-the-controller",children:"Step 3: Create the Controller"}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(l.A,{value:"orgchart",label:"OrgChartController",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class MyOrgChartScreen extends StatefulWidget {\n  @override\n  _MyOrgChartScreenState createState() => _MyOrgChartScreenState();\n}\n\nclass _MyOrgChartScreenState extends State<MyOrgChartScreen> {\n  late OrgChartController<Employee> controller;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Initialize the controller\n    controller = OrgChartController<Employee>(\n      items: employees,\n      \n      // Required: Provide unique ID for each item\n      idProvider: (employee) => employee.id,\n      \n      // Required: Provide parent ID (manager for org chart)\n      toProvider: (employee) => employee.managerId,\n      \n      // Optional: Update parent when reorganizing\n      toSetter: (employee, newManagerId) => Employee(\n        id: employee.id,\n        name: employee.name,\n        managerId: newManagerId,\n        position: employee.position,\n        department: employee.department,\n        imageUrl: employee.imageUrl,\n      ),\n      \n      // Optional: Customize box size\n      boxSize: Size(220, 120),\n      \n      // Optional: Customize spacing\n      spacing: 40,\n      runSpacing: 80,\n      \n      // Optional: Set orientation\n      orientation: GraphOrientation.topToBottom,\n      \n      // Optional: Arrange leaf nodes in columns\n      leafColumns: 3,\n    );\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    // Continue to Step 4...\n  }\n}\n"})})}),(0,a.jsx)(l.A,{value:"genogram",label:"GenogramController",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class MyGenogramScreen extends StatefulWidget {\n  @override\n  _MyGenogramScreenState createState() => _MyGenogramScreenState();\n}\n\nclass _MyGenogramScreenState extends State<MyGenogramScreen> {\n  late GenogramController<Person> controller;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    // Initialize the controller\n    controller = GenogramController<Person>(\n      items: familyMembers,\n      \n      // Required: Provide unique ID for each person\n      idProvider: (person) => person.id,\n      \n      // Required: Provide father's ID\n      fatherProvider: (person) => person.fatherId,\n      \n      // Required: Provide mother's ID\n      motherProvider: (person) => person.motherId,\n      \n      // Required: Provide list of spouse IDs\n      spousesProvider: (person) => person.spouseIds,\n      \n      // Required: Provide gender (0=male, 1=female)\n      genderProvider: (person) => person.gender,\n      \n      // Optional: Customize box size\n      boxSize: Size(150, 150),\n      \n      // Optional: Customize spacing\n      spacing: 30,\n      runSpacing: 60,\n      \n      // Optional: Set orientation\n      orientation: GraphOrientation.topToBottom,\n    );\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    // Continue to Step 4...\n  }\n}\n"})})})]}),"\n",(0,a.jsx)(n.h3,{id:"step-4-build-the-chart-widget",children:"Step 4: Build the Chart Widget"}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(l.A,{value:"orgchart",label:"OrgChart Widget",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Company Organization'),\n      actions: [\n        IconButton(\n          icon: Icon(Icons.swap_horiz),\n          onPressed: () {\n            // Switch orientation\n            controller.switchOrientation();\n          },\n        ),\n      ],\n    ),\n    body: OrgChart<Employee>(\n      controller: controller,\n      \n      // Build each node\n      builder: (NodeBuilderDetails<Employee> details) {\n        return Card(\n          elevation: details.isBeingDragged ? 8 : 4,\n          color: details.level == 1 \n            ? Colors.blue.shade100 \n            : Colors.white,\n          child: Container(\n            padding: EdgeInsets.all(12),\n            child: Column(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                // Employee photo\n                CircleAvatar(\n                  radius: 25,\n                  backgroundImage: NetworkImage(details.item.imageUrl),\n                ),\n                SizedBox(height: 8),\n                \n                // Name\n                Text(\n                  details.item.name,\n                  style: TextStyle(\n                    fontWeight: FontWeight.bold,\n                    fontSize: 14,\n                  ),\n                ),\n                \n                // Position\n                Text(\n                  details.item.position,\n                  style: TextStyle(\n                    fontSize: 12,\n                    color: Colors.grey[600],\n                  ),\n                ),\n                \n                // Department badge\n                Container(\n                  margin: EdgeInsets.only(top: 4),\n                  padding: EdgeInsets.symmetric(\n                    horizontal: 8, \n                    vertical: 2,\n                  ),\n                  decoration: BoxDecoration(\n                    color: Colors.blue.shade50,\n                    borderRadius: BorderRadius.circular(10),\n                  ),\n                  child: Text(\n                    details.item.department,\n                    style: TextStyle(fontSize: 10),\n                  ),\n                ),\n                \n                // Expand/Collapse button if has children\n                if (hasSubordinates(details.item))\n                  IconButton(\n                    icon: Icon(\n                      details.nodesHidden \n                        ? Icons.expand_more \n                        : Icons.expand_less,\n                      size: 20,\n                    ),\n                    onPressed: () {\n                      details.hideNodes();\n                    },\n                  ),\n              ],\n            ),\n          ),\n        );\n      },\n      \n      // Optional: Enable drag and drop\n      isDraggable: true,\n      \n      // Optional: Handle drop events\n      onDrop: (draggedEmployee, targetEmployee, isSubordinate) {\n        setState(() {\n          // Update your data model\n          updateEmployeeManager(\n            draggedEmployee, \n            targetEmployee,\n          );\n          \n          // Refresh the chart\n          controller.replaceAll(updatedEmployees);\n        });\n      },\n      \n      // Optional: Customize animations\n      duration: Duration(milliseconds: 500),\n      curve: Curves.easeInOut,\n      \n      // Optional: Customize edge appearance\n      linePaint: Paint()\n        ..color = Colors.grey.shade400\n        ..strokeWidth = 2.0,\n      arrowStyle: SolidGraphArrow(),\n      cornerRadius: 10,\n      lineEndingType: LineEndingType.arrow,\n    ),\n  );\n}\n\n// Helper method to check if employee has subordinates\nbool hasSubordinates(Employee employee) {\n  return employees.any((e) => e.managerId == employee.id);\n}\n"})})}),(0,a.jsx)(l.A,{value:"genogram",label:"Genogram Widget",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Family Tree'),\n      actions: [\n        IconButton(\n          icon: Icon(Icons.swap_horiz),\n          onPressed: () {\n            // Switch orientation\n            controller.switchOrientation();\n          },\n        ),\n      ],\n    ),\n    body: Genogram<Person>(\n      controller: controller,\n      \n      // Build each node\n      builder: (NodeBuilderDetails<Person> details) {\n        final person = details.item;\n        final age = DateTime.now().year - person.birthDate.year;\n        \n        return Container(\n          width: 140,\n          height: 140,\n          decoration: BoxDecoration(\n            shape: BoxShape.circle,\n            color: person.gender == 0 \n              ? Colors.blue.shade100 \n              : Colors.pink.shade100,\n            border: Border.all(\n              color: person.gender == 0 \n                ? Colors.blue \n                : Colors.pink,\n              width: 3,\n            ),\n            boxShadow: [\n              if (details.isBeingDragged)\n                BoxShadow(\n                  color: Colors.black26,\n                  blurRadius: 8,\n                  offset: Offset(0, 4),\n                ),\n            ],\n          ),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              // Gender icon\n              Icon(\n                person.gender == 0 \n                  ? Icons.male \n                  : Icons.female,\n                size: 30,\n                color: person.gender == 0 \n                  ? Colors.blue \n                  : Colors.pink,\n              ),\n              SizedBox(height: 4),\n              \n              // Name\n              Text(\n                person.name,\n                style: TextStyle(\n                  fontWeight: FontWeight.bold,\n                  fontSize: 12,\n                ),\n                textAlign: TextAlign.center,\n              ),\n              \n              // Birth year\n              Text(\n                '${person.birthDate.year}',\n                style: TextStyle(\n                  fontSize: 10,\n                  color: Colors.grey[600],\n                ),\n              ),\n              \n              // Age\n              if (person.isAlive)\n                Text(\n                  'Age: $age',\n                  style: TextStyle(\n                    fontSize: 10,\n                    color: Colors.grey[600],\n                  ),\n                ),\n                \n              // Deceased indicator\n              if (!person.isAlive)\n                Text(\n                  '\u271d',\n                  style: TextStyle(\n                    fontSize: 16,\n                    color: Colors.grey[700],\n                  ),\n                ),\n            ],\n          ),\n        );\n      },\n      \n      // Configure marriage styles\n      edgeConfig: GenogramEdgeConfig(\n        defaultMarriageStyle: MarriageStyle(\n          lineStyle: MarriageLineStyle.solid(\n            color: Colors.black,\n            strokeWidth: 2.0,\n          ),\n        ),\n        divorcedMarriageStyle: MarriageStyle(\n          lineStyle: MarriageLineStyle.dashed(\n            color: Colors.red,\n            strokeWidth: 2.0,\n          ),\n          decorator: DivorceDecorator(\n            color: Colors.red,\n            slashLength: 12.0,\n          ),\n        ),\n        childStrokeWidth: 1.5,\n        marriageColors: [\n          Colors.blue,\n          Colors.green,\n          Colors.orange,\n        ],\n      ),\n      \n      // Optional: Provide marriage status\n      marriageStatusProvider: (person, spouse) {\n        // Implement your logic\n        return MarriageStatus.married;\n      },\n      \n      // Optional: Enable drag and drop\n      isDraggable: true,\n      \n      // Optional: Customize animations\n      duration: Duration(milliseconds: 500),\n      curve: Curves.easeInOut,\n    ),\n  );\n}\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"-complete-working-example",children:"\ud83c\udfa8 Complete Working Example"}),"\n",(0,a.jsx)(n.p,{children:"Here's a complete, runnable example you can copy and paste:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="main.dart"',children:"import 'package:flutter/material.dart';\nimport 'package:org_chart/org_chart.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Org Chart Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        useMaterial3: true,\n      ),\n      home: BasicOrgChartDemo(),\n    );\n  }\n}\n\nclass BasicOrgChartDemo extends StatefulWidget {\n  @override\n  _BasicOrgChartDemoState createState() => _BasicOrgChartDemoState();\n}\n\nclass _BasicOrgChartDemoState extends State<BasicOrgChartDemo> {\n  late OrgChartController<Map<String, dynamic>> controller;\n  \n  final List<Map<String, dynamic>> employees = [\n    {'id': '1', 'name': 'Jane CEO', 'title': 'Chief Executive', 'managerId': null},\n    {'id': '2', 'name': 'John CTO', 'title': 'Chief Technology', 'managerId': '1'},\n    {'id': '3', 'name': 'Sarah CFO', 'title': 'Chief Finance', 'managerId': '1'},\n    {'id': '4', 'name': 'Mike Dev', 'title': 'Lead Developer', 'managerId': '2'},\n    {'id': '5', 'name': 'Emily QA', 'title': 'QA Manager', 'managerId': '2'},\n    {'id': '6', 'name': 'Tom Jr Dev', 'title': 'Junior Developer', 'managerId': '4'},\n    {'id': '7', 'name': 'Lisa Analyst', 'title': 'Financial Analyst', 'managerId': '3'},\n  ];\n\n  @override\n  void initState() {\n    super.initState();\n    controller = OrgChartController(\n      items: employees,\n      idProvider: (item) => item['id'],\n      toProvider: (item) => item['managerId'],\n      boxSize: Size(180, 100),\n      spacing: 30,\n      runSpacing: 60,\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Organization Chart'),\n        centerTitle: true,\n        actions: [\n          IconButton(\n            icon: Icon(Icons.rotate_90_degrees_ccw),\n            tooltip: 'Switch Orientation',\n            onPressed: () => controller.switchOrientation(),\n          ),\n        ],\n      ),\n      body: OrgChart<Map<String, dynamic>>(\n        controller: controller,\n        builder: (details) {\n          final item = details.item;\n          return Card(\n            elevation: details.isBeingDragged ? 8 : 3,\n            color: details.level == 1 \n              ? Theme.of(context).primaryColor.withOpacity(0.1)\n              : Colors.white,\n            child: Container(\n              padding: EdgeInsets.all(16),\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                children: [\n                  Icon(\n                    Icons.person,\n                    size: 30,\n                    color: Theme.of(context).primaryColor,\n                  ),\n                  SizedBox(height: 8),\n                  Text(\n                    item['name'],\n                    style: TextStyle(\n                      fontWeight: FontWeight.bold,\n                      fontSize: 14,\n                    ),\n                  ),\n                  Text(\n                    item['title'],\n                    style: TextStyle(\n                      fontSize: 12,\n                      color: Colors.grey[600],\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          );\n        },\n        isDraggable: true,\n        linePaint: Paint()\n          ..color = Colors.grey.shade400\n          ..strokeWidth = 2.0,\n        arrowStyle: SolidGraphArrow(),\n        cornerRadius: 10,\n      ),\n    );\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-whats-next",children:"\ud83c\udfaf What's Next?"}),"\n",(0,a.jsx)(n.p,{children:"Congratulations! You've created your first chart. Now explore more advanced features:"}),"\n",(0,a.jsxs)("div",{className:"next-steps",children:[(0,a.jsxs)("a",{href:"../3.0.0-orgchart/02-controller",className:"next-card",children:[(0,a.jsx)("h4",{children:"\ud83c\udfae Controller API"}),(0,a.jsx)("p",{children:"Learn about advanced controller features"})]}),(0,a.jsxs)("a",{href:"../3.0.0-orgchart/03-widget",className:"next-card",children:[(0,a.jsx)("h4",{children:"\ud83c\udfa8 Widget Customization"}),(0,a.jsx)("p",{children:"Customize appearance and behavior"})]}),(0,a.jsxs)("a",{href:"../4.0.0-genogram/01-overview",className:"next-card",children:[(0,a.jsx)("h4",{children:"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 Genogram"}),(0,a.jsx)("p",{children:"Create family trees and genealogies"})]}),(0,a.jsxs)("a",{href:"../6.0.0-examples/01-live-playground",className:"next-card",children:[(0,a.jsx)("h4",{children:"\ud83d\udcbc Live Examples"}),(0,a.jsx)("p",{children:"See interactive implementations"})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)("div",{className:"tip-box",children:(0,a.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,a.jsx)(n.strong,{children:"Pro Tip"}),": Start simple with basic nodes, then gradually add features like drag & drop, animations, and custom styling as you become more comfortable with the API."]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var r=t(4164);const a={tabItem:"tabItem_Ymn6"};var i=t(4848);function o({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,t),hidden:n,children:e})}}}]);