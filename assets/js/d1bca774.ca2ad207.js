"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[550],{8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>t});var i=n(6540);const d={},s=i.createContext(d);function l(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(s.Provider,{value:r},e.children)}},9297:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"genogram/genogram","title":"Genogram Widget","description":"Component for rendering family trees and relationship diagrams","source":"@site/docs/genogram/genogram.mdx","sourceDirName":"genogram","slug":"/genogram/","permalink":"/org_chart/docs/genogram/","draft":false,"unlisted":false,"editUrl":"https://github.com/ahnaineh/org_chart/tree/docs/docs/docs/genogram/genogram.mdx","tags":[],"version":"current","frontMatter":{"title":"Genogram Widget","description":"Component for rendering family trees and relationship diagrams"},"sidebar":"tutorialSidebar","previous":{"title":"GenogramController","permalink":"/org_chart/docs/genogram/controller"},"next":{"title":"Examples","permalink":"/org_chart/docs/examples"}}');var d=n(4848),s=n(8453);const l={title:"Genogram Widget",description:"Component for rendering family trees and relationship diagrams"},t="Genogram Widget",o={},a=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Constructor Parameters",id:"constructor-parameters",level:2},{value:"Edge Configuration",id:"edge-configuration",level:2},{value:"GenogramEdgeConfig Properties",id:"genogramedgeconfig-properties",level:3},{value:"Marriage Status",id:"marriage-status",level:2},{value:"Gender-Based Styling",id:"gender-based-styling",level:2},{value:"Drag and Drop Operations",id:"drag-and-drop-operations",level:2},{value:"Family Visualization Patterns",id:"family-visualization-patterns",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"genogram-widget",children:"Genogram Widget"})}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"Genogram"})," widget displays family trees with complex relationships including marriages, parental connections, and gender distinctions."]}),"\n",(0,d.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-dart",children:"Genogram<Person>(\r\n  controller: controller,\r\n  builder: (details) {\r\n    return Card(\r\n      // Gender-based styling\r\n      color: controller.isMale(details.item) \r\n          ? Colors.lightBlue.shade100 \r\n          : Colors.pink.shade100,\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(8.0),\r\n        child: Column(\r\n          children: [\r\n            CircleAvatar(\r\n              backgroundImage: details.item.photoUrl != null\r\n                ? NetworkImage(details.item.photoUrl!)\r\n                : null,\r\n              child: details.item.photoUrl == null\r\n                ? Icon(controller.isMale(details.item) \r\n                    ? Icons.male \r\n                    : Icons.female)\r\n                : null,\r\n            ),\r\n            SizedBox(height: 8),\r\n            Text(details.item.name),\r\n            Text(\"${details.item.birthYear}-${details.item.deathYear ?? ''}\"),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  },\r\n)\n"})}),"\n",(0,d.jsx)(r.h2,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"Genogram"})," widget extends ",(0,d.jsx)(r.code,{children:"BaseGraph"})," and inherits all its ",(0,d.jsx)(r.a,{href:"/org_chart/docs/common/graph",children:"common properties"}),", plus:"]}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Parameter"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Default"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"controller"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"GenogramController<E>"})}),(0,d.jsx)(r.td,{children:"required"}),(0,d.jsx)(r.td,{children:"Controller managing chart data and layout"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"edgeConfig"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"GenogramEdgeConfig"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"GenogramEdgeConfig()"})}),(0,d.jsx)(r.td,{children:"Configuration for edge styling"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"marriageStatusProvider"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"MarriageStatus Function(E,E)?"})}),(0,d.jsx)(r.td,{children:"null"}),(0,d.jsx)(r.td,{children:"Function to determine marriage status between two individuals"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"onDrop"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Function(E dragged, E target)?"})}),(0,d.jsx)(r.td,{children:"null"}),(0,d.jsx)(r.td,{children:"Callback when a node is dropped onto another"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"edge-configuration",children:"Edge Configuration"}),"\n",(0,d.jsx)(r.p,{children:"Family trees have specialized edge styling for different types of relationships:"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-dart",children:"Genogram<Person>(\r\n  controller: controller,\r\n  builder: personBuilder,\r\n  edgeConfig: GenogramEdgeConfig(\r\n    marriageLineWidth: 2.0,\r\n    marriageColor: Colors.red,\r\n    siblingLineColor: Colors.blueGrey,\r\n    parentChildLineColor: Colors.green,\r\n    parentChildLineWidth: 1.5,\r\n    parentChildLineStyle: ParentChildLineStyle.angular,\r\n    marriageDashPattern: [5, 2], // For divorced/separated relationships\r\n  ),\r\n)\n"})}),"\n",(0,d.jsx)(r.h3,{id:"genogramedgeconfig-properties",children:"GenogramEdgeConfig Properties"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Property"}),(0,d.jsx)(r.th,{children:"Type"}),(0,d.jsx)(r.th,{children:"Default"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"marriageLineWidth"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"double"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"1.5"})}),(0,d.jsx)(r.td,{children:"Width of the line connecting spouses"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"marriageColor"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Color?"})}),(0,d.jsx)(r.td,{children:"null"}),(0,d.jsx)(r.td,{children:"Color for marriage lines (null = use linePaint color)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"siblingLineWidth"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"double"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"1.0"})}),(0,d.jsx)(r.td,{children:"Width of the horizontal line connecting siblings"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"siblingLineColor"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Color?"})}),(0,d.jsx)(r.td,{children:"null"}),(0,d.jsx)(r.td,{children:"Color for sibling connecting lines"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"parentChildLineWidth"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"double"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"1.0"})}),(0,d.jsx)(r.td,{children:"Width of the lines connecting parents to children"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"parentChildLineColor"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Color?"})}),(0,d.jsx)(r.td,{children:"null"}),(0,d.jsx)(r.td,{children:"Color for parent-child lines"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"marriageDashPattern"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"List<double>?"})}),(0,d.jsx)(r.td,{children:"null"}),(0,d.jsx)(r.td,{children:"Pattern for dashed marriage lines"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"parentChildLineStyle"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"ParentChildLineStyle"})}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"ParentChildLineStyle.standard"})}),(0,d.jsx)(r.td,{children:"Style of parent-child connections"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"marriage-status",children:"Marriage Status"}),"\n",(0,d.jsx)(r.p,{children:"You can customize how different relationship statuses are displayed:"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-dart",children:"Genogram<Person>(\r\n  controller: controller,\r\n  builder: personBuilder,\r\n  marriageStatusProvider: (person, spouse) {\r\n    if (person.divorceIds?.contains(spouse.id) ?? false) {\r\n      return MarriageStatus.divorced;\r\n    }\r\n    if (person.separationIds?.contains(spouse.id) ?? false) {\r\n      return MarriageStatus.separated;\r\n    }\r\n    return MarriageStatus.married;\r\n  },\r\n)\n"})}),"\n",(0,d.jsx)(r.p,{children:"The available marriage statuses are:"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Status"}),(0,d.jsx)(r.th,{children:"Visual Representation"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"married"})}),(0,d.jsx)(r.td,{children:"Solid line connecting spouses"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"divorced"})}),(0,d.jsx)(r.td,{children:"Dashed/broken line with two slashes"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"separated"})}),(0,d.jsx)(r.td,{children:"Dashed/dotted line"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"engaged"})}),(0,d.jsx)(r.td,{children:"Lighter or thinner line"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"gender-based-styling",children:"Gender-Based Styling"}),"\n",(0,d.jsx)(r.p,{children:"The genogram automatically positions nodes based on gender, but you can also use gender information in your node builder:"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-dart",children:"builder: (details) {\r\n  return Card(\r\n    shape: controller.isMale(details.item)\r\n      ? RoundedRectangleBorder(borderRadius: BorderRadius.circular(4))\r\n      : CircleBorder(), // Traditional: rectangle for males, circle for females\r\n    color: controller.isMale(details.item)\r\n      ? Colors.lightBlue.shade100\r\n      : Colors.pink.shade100,\r\n    child: /* Node content */,\r\n  );\r\n}\n"})}),"\n",(0,d.jsx)(r.h2,{id:"drag-and-drop-operations",children:"Drag and Drop Operations"}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"onDrop"})," callback provides the dragged item and target item:"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-dart",children:"Genogram<Person>(\r\n  controller: controller,\r\n  builder: personBuilder,\r\n  onDrop: (dragged, target) {\r\n    // Handle relationship changes, such as:\r\n    setState(() {\r\n      if (controller.isMale(dragged) && controller.isFemale(target)) {\r\n        // Add marriage relationship\r\n        dragged.spouseIds ??= [];\r\n        if (!dragged.spouseIds!.contains(target.id)) {\r\n          dragged.spouseIds!.add(target.id);\r\n        }\r\n      } else {\r\n        // Add as child\r\n        if (controller.isMale(target)) {\r\n          dragged.fatherId = target.id;\r\n        } else {\r\n          dragged.motherId = target.id;\r\n        }\r\n      }\r\n      controller.calculatePosition();\r\n    });\r\n  },\r\n)\n"})}),"\n",(0,d.jsx)(r.h2,{id:"family-visualization-patterns",children:"Family Visualization Patterns"}),"\n",(0,d.jsx)(r.p,{children:"The Genogram layout follows standard family tree conventions:"}),"\n",(0,d.jsxs)(r.ol,{children:["\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Couple Relationships"}),": Spouses are positioned side-by-side"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Parent-Child Relations"}),": Children are below/right of their parents"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Sibling Groups"}),": Children of the same parents are grouped together"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Multiple Marriages"}),": All spouses of an individual are adjacent to them"]}),"\n",(0,d.jsxs)(r.li,{children:[(0,d.jsx)(r.strong,{children:"Gender Ordering"}),": In couples, males are typically positioned before females"]}),"\n"]}),"\n",(0,d.jsx)(r.p,{children:"The layout automatically adapts to complex family structures including:"}),"\n",(0,d.jsxs)(r.ul,{children:["\n",(0,d.jsx)(r.li,{children:"Multiple marriages"}),"\n",(0,d.jsx)(r.li,{children:"Half-siblings"}),"\n",(0,d.jsx)(r.li,{children:"Adoptive relationships"}),"\n",(0,d.jsx)(r.li,{children:"Multi-generational trees"}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);